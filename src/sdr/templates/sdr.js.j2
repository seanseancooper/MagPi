{% if container %}
<div id="sdr" class="module_tab" style="position:relative; display:none;">
{% set config = container.get_module_config('sdr') %}
{% set sdr_host, sdr_port = config['SERVER_NAME'].split(':') %}
    <iframe src="http://sdr.{{ sdr_host }}:{{ sdr_port }}/sdr" height="700" width="1070" style="overflow: hidden;"></iframe>
{% else %}
<div id="sdr" class="module_tab" style="position:relative; display:block;">
    <script src="{{ url_for('static', filename='js/socket.io.js') }}"></script>
    <script src="{{ url_for('static', filename='js/Cango-29v04.js') }}"></script>
    <script src="{{ url_for('static', filename='js/CangoAxes-10v06.js') }}"></script>
    <script src="{{ url_for('static', filename='js/Spectrogram-2v01.js') }}"></script>
    <script src="{{ url_for('static', filename='js/make_spectrogram.js') }}"></script>

    <link rel="stylesheet" href="{{ url_for('static', filename='css/sdr.css') }}">

    <main>
        <!-- Spectrogram Display 0 -->
        <div class="spectrogram">
            <div class="sdr-info">SDR 0: 100 Mhz, bandwidth: 1000 k</div>
            <div class="time_display" style="z-index:2;">
                <span id="elapsedTimeDisplay" class=""></span>
            </div>
            <div class="spectrogram-display" style="">
                <div class="spectrogram-canvas" style="">
                    <canvas id="cvs_xaxis" style="background: rgba(0,0,0, 0.2); display: block; width: 1024px; height: 20px; position: absolute; top: 0; left: 0; z-index: 2;" width="1024px" height="20px"></canvas>
                    <canvas id="cvs_hl" style="display: block; width: 1024px; height: 256px; position: relative; top: -20; left: 0; z-index: 1;" width="1024px" height="256px"></canvas>
                    <canvas id="grid" style="position: absolute; top: 0; left: 0; z-index: 1;" width="1024px" height="256px"></canvas>
                    <canvas id="cvs_spec" style="display: block; width: 1024px; height: 256px; position: absolute; top: 0; left: 0; z-index: 0;" width="1024px" height="256px"></canvas>
                    <input class="ud_input" id="cvs_spec_timeslider" style="height: 256px; z-index: 5" type="range" orient="vertical" min="0" max="100" value="" />
                </div>
                <label><input id="grid_slider_input" class="sdr_grid_slider" style="" type="range" min="1" max="128" step="2" value="9" data-action="" data-target="sdr" onChange="handleGridSlider(this);"/>
                <output for="grid_slider_input" style=""><span id="grid_slider_output"></span></output></label>
            </div>

            <div class="sdr-fileselector-display" style="">
                <button class="sdr-button" id="ctrl_live"><span id="ctrl_live_status">Online</span></button>
                &nbsp;
                <select id="fileSelector" class="sdr-select" style="width: 200px;">
                    {% for filename in analyzer.reader.iq_files : %}
                    <option value="{{ filename }}">{{ filename.split('/')[-1] }}</option>
                    {% endfor %}
                </select>
            </div>

            <div class="sdr-range-controls" style="">
                <div class="range-control" style="">
                    <input class="lr_input" type="range" id="rangeMin" min="-100" max="100" step="1" value="-5">
                    <input class="lr_input" type="range" id="rangeMax" min="-100" max="100" step="1" value="100">
                </div>
            </div>
            <div id="rangeMinDb" class="rangeMinDb" style="">0 dB</div>
            <div id="rangeMaxDb" class="rangeMaxDb" style="">0 dB</div>

            <div class="sdr-peak-display" style="">
                <div class="sdr-peak-checkboxes" style="">
                    <label><input type="checkbox" id="trackPeaks">Track Peaks</label>
                    <label><input type="checkbox" id="holdPeaks">Hold Peaks</label>
                </div>
                <div class="sdr-peak-values" style="">
                    <label>Freq: 121.50 MHz</label>
                    <label>Peak dB: -32.1 dB</label>
                </div>
            </div>

            <div class="sdr-button-display" style="">
                <div class="sdr-buttons" style="">
                        <button class="sdr-button" id="ctrl_record">Record</button>
                        <button class="sdr-button" id="ctrl_play">Play</button>
                        <button class="sdr-button" id="ctrl_solo">Solo</button>
                        <button class="sdr-button" id="ctrl_mute">Mute</button>
                        <button class="sdr-button" id=""></button>
                        <button class="sdr-button" id="ctrl_analyze">Analyze</button>
                        <button class="sdr-button" id="ctrl_demux">Demux</button>
                        <button class="sdr-button" id="ctrl_decode">Decode</button>
                        <button class="sdr-button" id="ctrl_encode">Encode</button>
                        <button class="sdr-button" id="ctrl_filter">Filter</button>
                        <button class="sdr-button" id="ctrl_block">Block</button>
                        <button class="sdr-button" id="ctrl_label">Label</button>
                        <button class="sdr-button" id="ctrl_alert">Alert</button>
                </div>
            </div>

            <div class="infoLayer-display" style="display: none;">
                <span>
                    <div id="infoLayer" class="infoLayer">InfoLayer</div>
                    <div id="info-min" class="info-min">min</div>
                    <div id="info-max" class="info-max">max</div>
                </span>

                <script>
                    //function updateInfoDisplay(metadata) {
                    //    document.getElementById("info_label").textContent = metadata.label || "Unknown";
                    //    document.getElementById("info_freq").textContent = `${(metadata.center_freq / 1e6).toFixed(3)} MHz`;
                    //    document.getElementById("info_bw").textContent = `${(metadata.bandwidth / 1e3).toFixed(1)} kHz`;
                    //    document.getElementById("info_mod").textContent = metadata.modulation || "â€”";
                    //    document.getElementById("info_snr").textContent = `${metadata.snr.toFixed(1)} dB`;
                    //}
                </script>

            </div>
        </div>
    </main>
    <script>
        window.addEventListener('DOMContentLoaded', () => {
            // Instantiate InfoLayer Handlers
            const highlightLayer = new HighlightLayer("cvs_hl");
            const highlightData = {};
            setupInfoLayerHandlers(highlightLayer.canvas, highlightData);

            const latchButton = document.getElementById('ctrl_live');
            const statusText = document.getElementById('ctrl_live_status');
            let isLatched = false; // Initial state: button is off

            latchButton.addEventListener('click', () => {
                isLatched = !isLatched; // Toggle the state

                if (isLatched) {
                    statusText.textContent = 'Online';
                    latchButton.classList.add('active'); // Add a class for styling
                } else {
                    statusText.textContent = 'Offline';
                    latchButton.classList.remove('active'); // Remove the class
                }
            });

            const rangeMin = document.getElementById("rangeMin");
            const rangeMax = document.getElementById("rangeMax");

            rangeMin.addEventListener('input', updateSliderBounds);
            rangeMax.addEventListener('input', updateSliderBounds);

            const fileSelector = document.getElementById("fileSelector");
            fileSelector.addEventListener("change", handleFileSelect);
            /*
            fileSelector.addEventListener("change", (event) => {
              // Code to execute when a new option is selected
                    console.log("New Option Selected:", event.target.value); // Logs the value of the selected option
            });
            */

        });
    </script>
{% endif %}
</div>