{% if container %}
    {% set config = container.get_module_config('cam') %}
    {% if 'cam' in container.live_modules %}
        {% set plugin = container.get_module_stats('cam') %}
    {% else %}
        {% set plugin = { 'frame_shape': (480, 702, 0), 'majic_color': (255, 0, 0) } %}
    {% endif %}
{% endif %}

{% set cam_host, cam_port = config['SERVER_NAME'].split(':') %}
{% set streaming_host = config['PLUGIN']['streaming_host'] %}
{% set streaming_port = config['PLUGIN']['streaming_port'] %}

<link rel="stylesheet" href="{{ url_for('.static', filename='css/cropper.css') }}">
<link rel="stylesheet" href="{{ url_for('.static', filename='css/cam_controller.css') }}">
<script>
    function setsHeaders(xhttp) {
        xhttp.setRequestHeader('Access-Control-Allow-Origin', 'localhost:*');
        xhttp.setRequestHeader('Access-Control-Allow-Methods', 'POST, GET');
        xhttp.setRequestHeader('Content-Type', 'text/html');
        xhttp.setRequestHeader('Access-Control-Allow-Headers', 'Content-Type, Access-Control-*, MAJIC-COLOR');
    }

    function load_video(){

        const url  = "http://{{ streaming_host }}:{{ streaming_port }}/stream";
        const stream = new Request(url);

        fetch(url)
            .then((response) => {
                const myBlob = response.blob();
                console.log("YOLO response.headers:", response.headers);

                //var _videoimg = document.getElementById("_videoimg");  <img id="_videoimg" src="">
                //_videoimg.src = url;

                var _videodiv = document.getElementById("_videodiv");
                const image = new Image();
                image.src = url;
                image.style = "position:absolute;left:0px;top:0px;z-index:-1;";
                _videodiv.appendChild(image);
        });
    };

    function fore_aft(button){
        // changes fore/aft view
        var xhttp = new XMLHttpRequest();
        xhttp.open("POST", "http://cam.{{ cam_host }}:{{ cam_port }}/view/" + button.value);
        setsHeaders(xhttp);
        xhttp.setRequestHeader('TARGET', 'cam');
        xhttp.send(); // no response

        button.value = (button.value == "FORE")? "AFT": "FORE";
        document.getElementById("fore_aft_button").innerHTML = button.value.split('')[0];
        document.getElementById("fore_aft_button").classList.value = "cam_button";

        setTimeout(function() {
            load_video();
        }, 10);
    }

    function cam_multibutton(button){
        // set symbology & analysis
        const xhttp = new XMLHttpRequest();
        xhttp.open("POST", "http://cam.{{ cam_host }}:{{ cam_port }}/multibutton/" + button.value);
        setsHeaders(xhttp);
        xhttp.setRequestHeader('TARGET', 'cam');

        xhttp.send();

        xhttp.onload = function() {
            const resp = xhttp.response;
            document.getElementById("multi_button").value = resp;
            document.getElementById("multi_button_text").innerHTML = resp;
        }
    }

    function handleCheckBox(checkbox) {
        // handle binary
        const cb_output = document.getElementById(checkbox.id.replace('_input', '_output'));

        function updateCheckBox() {
            var component = checkbox.id.replace('_input', '');

            const xhttp = new XMLHttpRequest();
            xhttp.open('POST', 'http://cam.{{ cam_host }}:{{ cam_port }}/plugin/' + checkbox.id.replace('cam_checkbox_', '').replace('_input', '') + "/" + checkbox.checked);
            setsHeaders(xhttp);
            xhttp.setRequestHeader('TARGET', 'cam');

            xhttp.send();

            xhttp.onload = function() {
                if (xhttp.response == "OK") {
                    cb_output.innerText = (checkbox.checked)? "ON": "OFF";
                }
            };
        }

        updateCheckBox();
    }

    function handleSlider(slider) {
        // handle continous
        const slider_output = document.getElementById(slider.id.replace('_input', '_output'));

        function updateSlider() {
            var component = slider.id.replace('_input', '');
            const xhttp = new XMLHttpRequest();
            xhttp.open("POST", "http://cam.{{ cam_host }}:{{ cam_port }}/plugin/" + slider.id.replace('cam_slider_', '').replace('_input', '') + "/" + parseFloat(slider.value));
            setsHeaders(xhttp);
            xhttp.setRequestHeader('TARGET', 'cam');

            xhttp.send();

            xhttp.onload = function() {
                if (xhttp.response == "OK") {
                    slider_output.innerText = slider.value;
                    slider.addEventListener('input', updateSlider);
                }
            };
        }

        updateSlider();
    }

    function handleGridSlider(slider) {
        const grid = document.getElementById("grid");

        document.querySelector('#cam_slider_krnl_input')
            .addEventListener('input', evt => {

            const slider_output = document.getElementById(slider.id.replace('_input', '_output'));
            grid.style.setProperty('display','block');
            const ctx = grid.getContext("2d");
            const range = (start, stop, step) => Array.from({ length: (stop - start) / step + 1}, (_, i) => start + (i * step))
            const slider_range = 127;

            function draw_line(ctx, fx, fy, tx, ty){
                ctx.lineWidth = 1;
                ctx.strokeStyle = 'rgb{{ plugin.majic_color }}';

                ctx.beginPath();
                ctx.moveTo(fx, fy);
                ctx.lineTo(tx, ty);
                ctx.stroke();
            };

            function updateSlider() {
                const component = slider.id.replace('_input', '');
                const text = document.getElementById('cam_slider_krnl_output');

                let stepSz = slider.value;
                text.innerHTML = slider.value;

                let hw = grid.width/2;
                let hh = grid.height/2;
                let hs = stepSz/2;
                let hsl = slider_range/2

                var pos_heights = range(0, grid.height, hs);
                var pos_widths = range(0, grid.width, hs);

                ctx.clearRect(0, 0, grid.width, grid.height);
                ctx.save();

                ctx.translate(hw, hh);
                ctx.fillRect(-4, -4, 8, 8);

                for(i=0; i<2; i++){

                    for (y=0; y < pos_heights.length; y++) {
                        draw_line(ctx, -grid.height, pos_heights[y], grid.height, pos_heights[y]);
                    };

                    for (x=0; x < pos_widths.length; x++) {
                        draw_line(ctx, pos_widths[x], -grid.width,  pos_widths[x], grid.width);
                    }
                    ctx.rotate(180 * Math.PI / 180);
                }
                // Restore the transform
                ctx.restore();

            }
            updateSlider();
        });
        grid.style.setProperty('display','none');
    }

    function handleCropper(cropper) {
        // send crop
        const cropper_output = document.getElementById(cropper.id.replace('_input', '_output'));

        function updateCropper() {
            var component = cropper.id.replace('_input', '');

            const xhttp = new XMLHttpRequest();
            xhttp.open("POST", "http://cam.{{ cam_host }}:{{ cam_port }}/plugin/" + component + "/" + cropper.value);
            setsHeaders(xhttp);
            xhttp.setRequestHeader('TARGET', 'cam');

            xhttp.send();

            xhttp.onload = function() {
                if (xhttp.response == "OK"){
                    var j = JSON.parse(cropper.value);
                    cropper_output.innerText = "x:" + j['x'] +
                                              " y:" + j['y'] +
                                              " w:" + j['w'] +
                                              " h:" + j['h'];
                }
            };
        }

        updateCropper();
    }

    function cam_snap(){
        //  creates still image of current view
        const xhttp = new XMLHttpRequest();
        xhttp.open("POST", "http://cam.{{ cam_host }}:{{ cam_port }}/snap");
        setsHeaders(xhttp);
        xhttp.setRequestHeader('TARGET', 'cam');

        xhttp.send();

        // on response, run the videobutton animation
        xhttp.onload = function() {
            const resp = xhttp.response;
            var snapButton = document.getElementById('snap_button_text');

            if (resp == "OK"){
                snapButton.classList.value = "snap_button_text";
                snapButton.innerHTML = "x";
                setTimeout(function() {
                    snapButton.innerHTML = "+";
                }, 250);
            }
        };
    };
</script>

{% if container %}
<div id="cam" class="module_tab" style="position:relative;display:none;">
{% else %}
<div id="cam" class="module_tab" style="position:relative;display:block;">
{% endif %}

    <script>
      const url  = "http://{{ streaming_host }}:{{ streaming_port }}/stream";

      fetch(url)
        .then((response) => {
          const myBlob = response.blob();
          console.log("YOLO response.headers:", response.headers);

          //var _videoimg = document.getElementById("_videoimg");  <img id="_videoimg" src="">
          //_videoimg.src = url;

          var _videodiv = document.getElementById("_videodiv");
          const image = new Image();
          image.src = url;
          image.style = "position:absolute;left:0px;top:0px;z-index:-1;";
          _videodiv.appendChild(image);

        });
    </script>

    <div id="videodiv" class="videodiv" style="width:{{ plugin.frame_shape[1] }}px;height:{{ plugin.frame_shape[0] }}px;">
        <div id="_videodiv" class="_video" style="width:{{ plugin.frame_shape[1] }}px;height:{{ plugin.frame_shape[0] }}px;">
            <canvas id="_target" class="_target" width="{{ plugin.frame_shape[1] }}" height="{{ plugin.frame_shape[0] }}"></canvas>
            <canvas id="grid" class="_grid" width="{{ plugin.frame_shape[1] }}" height="{{ plugin.frame_shape[0] }}"></canvas>
        </div>
    </div>

    <script src="{{ url_for('.static', filename='cropperjs/dist/cropper.js') }}"></script>

    {% if not container %}
    <script>
        window.addEventListener('DOMContentLoaded', function () {
            var image = document.querySelector('#_target');
            var cropper = new Cropper(image, {
                viewMode: 1,
                center: true,
                dragMode: 'move',
                zoomable: false,
                scalable: false,
                autoCropArea: .50,
                restore: false,
                modal: false,
                cropBoxMovable: true,
                cropBoxResizable: true,
                toggleDragModeOnDblclick: false,
                cropend: function (event) {
                    cropper.getData();
                    var cropBoxData = cropper.getCropBoxData();

                    var c = Object();
                    c.id = 'crop_input';

                    value = {
                        'x': Math.round(cropBoxData.left),
                        'y': Math.round(cropBoxData.top),
                        'w': Math.round(cropBoxData.width),
                        'h': Math.round(cropBoxData.height)
                    }

                    c.value = JSON.stringify(value);
                    handleCropper(c);
                }
            });
       });
    </script>
    {% endif %}

    <div id="cam_button_box" style="left:5px;top:5px;color: rgb{{ plugin.majic_color }}" class="cam_button_box">
       <button id="fore_aft_button" class="cam_button" value="AFT" onClick="fore_aft(this);">
            <span id="fore_aft_button_text" style="" class="fore_aft_button_text">A</span>
        </button>
        <button id="multi_button" class="cam_button" value="OFF" data-action="" data-target="CAM" onClick="cam_multibutton(this);">
            <span id="multi_button_text" style="left:-1px;" class="multi_button_text">OFF</span>
        </button>
        <button id="snap_button" class="cam_button"  value="SNAP" data-action="" data-target="CAM" onClick="cam_snap();">
            <span id="snap_button_text" style="" class="snap_button_text">+</span>
        </button>
    </div>

    <div id="cam_info_box" style="left:125px;top:5px;color: rgb{{ plugin.majic_color }}" class="cam_info_box">
        <div id="cam_slider_outputs" style="top:-2px;" class="cam_slider_outputs">
            ∆:&nbsp;<span id="cam_slider_threshold_output">-000</span>&nbsp;|&nbsp;
            ∞:&nbsp;<span id="cam_checkbox_hold_threshold_output">OFF</span>&nbsp;|&nbsp;
            ⊞:&nbsp;<span id="cam_slider_krnl_output">000</span>&nbsp;|&nbsp;
            ƒ:&nbsp;<span id="cam_slider_f_limit_output">00</span>&nbsp;|&nbsp;
            %:&nbsp;<span id="cam_slider_frm_delta_pcnt_output">000.00</span>
            <br>
            <span id="crop_output" class="cam_slider_crop_stats">x:0 y:0 w:0 h:0</span>
        </div>
    </div>

    <div style="left:415px;top:5px;color: rgb{{ plugin.majic_color }}" class="cam_checkbox_box">
        <input id="cam_checkbox_hold_threshold_input" style="top:2px;left:-2px;" type="checkbox" {{ 'checked' if plugin.show_threshold is true }} data-action="" data-target="cam" onChange="handleCheckBox(this);"/>
        <br>&nbsp;&nbsp;∞
    </div>
    <div style="left:446px;top:5px;color: rgb{{ plugin.majic_color }}" class="cam_slider_box">
        <input id="cam_slider_threshold_input" class="cam_slider" type="range" min="-100" max="100" step="1" value="0" data-action="" data-target="cam" onChange="handleSlider(this);"/>
        <input id="cam_slider_krnl_input" class="cam_slider" type="range" min="1" max="128" step="2" value="9" data-action="" data-target="cam" onChange="handleGridSlider(this);"/>
    </div>
    <div style="left:565px;top:5px;color: rgb{{ plugin.majic_color }}" class="cam_slider_box">
        <input id="cam_slider_f_limit_input" class="cam_slider" type="range" min="1" max="60" step="1" value="2" data-action="" data-target="cam" onChange="handleSlider(this);"/>
        <input id="cam_slider_frm_delta_pcnt_input" class="cam_slider" type="range" min="0.00" max="100.00" step="0.01" value="50.00" data-action="" data-target="cam" onChange="handleSlider(this);"/>
    </div>
</div>