<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>CAMController</title>
    <style>
        .highlight {
            color: rgb{{ plugin.majic_color }};
        }
    </style>
    <script>
        const highlight = {{ plugin.majic_color }};
    </script>
    <link rel="stylesheet" href="{{ url_for('cam_bp.static', filename='Jcrop-master/dist/jcrop.css') }}">
    <link rel="stylesheet" href="{{ url_for('cam_bp.static', filename='css/cam_controller.css') }}">

    <script src="{{ url_for('cam_bp.static', filename='js/jquery-3.3.1.min.js') }}"
            integrity="sha256-FgpCb/KJQlLNfOu91ta32o/NMZxltwRo8QtmkMRdAu8="
            crossorigin="anonymous">
    </script>

    <script>

        function setsHeaders(xhttp) {
            xhttp.setRequestHeader('Access-Control-Allow-Origin', 'localhost:*');
            xhttp.setRequestHeader('Access-Control-Allow-Methods', 'POST, GET');
            xhttp.setRequestHeader('Content-Type', 'text/html');
            xhttp.setRequestHeader('Access-Control-Allow-Headers', 'Content-Type, Access-Control-*, majic-color');
        }

        function load_video(){
            var _video = document.getElementById("_video");

            while (_video.src != "http://localhost:6100/stream") {
                _video.src = "http://localhost:6100/stream";
            }
        }

        function fore_aft(button){
            // changes fore/aft view
            var xhttp = new XMLHttpRequest();
            xhttp.open('POST', '{{ url_for('.index')}}view/' + button.value);
            setsHeaders(xhttp);
            xhttp.send(); // no response

            button.value = (button.value == "FORE")? "AFT": "FORE";
            document.getElementById("fore_aft_button").innerHTML = button.value.split('')[0];
            document.getElementById("fore_aft_button").classList.value = "fore_aft_button";

            setTimeout(function() {
                load_video();
            }, 10);
        }

        function cam_multibutton(button){
            // set symbology & analysis
            const xhttp = new XMLHttpRequest();
            xhttp.open('POST', "{{ url_for('.index')}}multibutton/" + button.value);
            setsHeaders(xhttp);
            xhttp.send();

            xhttp.onload = function() {
                const resp = xhttp.response;
                document.getElementById("multi_button").value = resp;
                document.getElementById("multi_button_text").innerHTML = resp.txt;
            }
        }

        function handleCropper(cropper) {
            // send crop
            const cropper_output = document.getElementById(cropper.id.replace('_input', '_output'));

            function updateCropper() {
                var component = cropper.id.replace('_input', '');

                const xhttp = new XMLHttpRequest();
                xhttp.open('POST', '{{ url_for('.index')}}plugin/' + component + "/" + cropper.value);
                setsHeaders(xhttp);
                xhttp.send();

                xhttp.onload = function() {
                    if (xhttp.response == "OK"){
                        var j = JSON.parse(cropper.value);
                        cropper_output.innerText = "x:" + j['x'] +
                                                  " y:" + j['y'] +
                                                  " w:" + j['w'] +
                                                  " h:" + j['h'];
                    }
                };
            }

            updateCropper();
        }
        /*
        function draw_grid(grid_shape, color, thickness){
            # do this in javascript
            h, w = target.size()
            var rows, cols = grid_shape[0], grid_shape[1]

            # draw vertical lines
            for x in range(start=0, stop=w, step=cols){
                x = Math.parseInt(Math.round(x));
                line((x, 125), (x, 345), color, thickness);
            }

            # draw horizontal lines
            for y in range(start=125, stop=345, step=rows){
                y = Math.parseInt(Math.round(y));
                // line((0, y), (w, y), color, thickness);
            }
        }
        */
        function handleSlider(slider) {
            // handle continous
            const slider_output = document.getElementById(slider.id.replace('_input', '_output'));

            function updateSlider() {
                var component = slider.id.replace('_input', '');
                draw_grid([slider.value, slider.value], '#00F', 1);
                const xhttp = new XMLHttpRequest();
                xhttp.open('POST', '{{ url_for('.index')}}plugin/' + slider.id.replace('cam_slider_', '').replace('_input', '') + "/" + parseFloat(slider.value));
                setsHeaders(xhttp);
                xhttp.send();

                xhttp.onload = function() {
                    if (xhttp.response == "OK") {
                        slider_output.innerText = slider.value;
                        slider.addEventListener('input', update);
                    }
                };
            }

            updateSlider();
        }

        function handleCheckBox(checkbox) {
            // handle binary
            const cb_output = document.getElementById(checkbox.id.replace('_input', '_output'));

            function updateCheckBox() {
                var component = checkbox.id.replace('_input', '');

                const xhttp = new XMLHttpRequest();
                xhttp.open('POST', '{{ url_for('.index')}}plugin/' + checkbox.id.replace('cam_checkbox_', '').replace('_input', '') + "/" + checkbox.checked);
                setsHeaders(xhttp);
                xhttp.send();

                xhttp.onload = function() {
                    if (xhttp.response == "OK") {
                        cb_output.innerText = (checkbox.checked)? "ON": "OFF";
                    }
                };
            }

            updateCheckBox();
        }

        function cam_snap(){
            //  creates still image of current view
            const xhttp = new XMLHttpRequest();
            xhttp.open('POST', '{{ url_for('.index')}}snap/');
            setsHeaders(xhttp);
            xhttp.send();

            // on response, run the videobutton animation
            xhttp.onload = function() {
                const resp = xhttp.response;
                var _video = document.getElementById('_video');

                if (resp == "OK"){
                    // document.getElementById("_video").classList.append = "videobutton";
                }
            };
        };
    </script>
</head>
<body>
<div>
    <script src="{{ url_for('cam_bp.static', filename='Jcrop-master/dist/jcrop.js') }}"></script>
    <div id="videodiv" style="" class="videodiv">
        <iframe id="_video" style="" class="_video" src="" onLoad="load_video();"></iframe>
    </div>
    <img id="target" style="" class="target" src="{{ url_for('cam_bp.static', filename='images/transgraphic.gif') }}">
    <script>
        // interpret crop
        const j = Jcrop.attach('target');
        const w = Jcrop.Widget.create();
        j.addWidget(w);
        j.setOptions({
            shade: false,
            multi: true
        });
        j.listen('crop.change',(w,e) => {
          var c = Object();
          c.id = 'crop_input';
          w.pos.w += w.pos.x;
          w.pos.h += w.pos.y;
          c.value = JSON.stringify(w.pos);
          handleCropper(c);
        });
        j.focus();
    </script>
    <div id="top_buttons" style="" class="top_buttons highlight">
       <button id="fore_aft_button" class="button" value="AFT" onClick="fore_aft(this);">
            <div id="fore_aft_button_text" style="">A</div>
        </button>
        <button id="multi_button" style="position:relative;top:-3px;" class="button" value="OFF" onClick="cam_multibutton(this);">
            <div id="multi_button_text" style="font-size:12px;color:#333;position:relative;left:-2px;top:1px;" class="multi_button_text">OFF</div>
        </button>
        <button id="snap_button" style="position:relative;top:-1px;" class="button"  value="SNAP" onClick="cam_snap();">
            <div id="snap_button_text" style="position:relative;left:-1px;top:1px;" class="snap_button_text">ðŸ˜€</div>
        </button>
        <button id="erase_button" style="text-align:center;position:relative;top:-1px;left:562px" class="button">
            <div id="erase_button_text" style="top:1px;color:red;" class="erase_button_text">!</div>
        </button>
        {% include 'audio_player.html.j2' ignore missing %}
    </div>

    <div id="info_box" style="" class="info_box">
        <div id="cam_slider_outputs" style="" class="cam_slider_outputs highlight">
                âˆ‘:&nbsp;<span id="cam_slider_threshold_output">{{ plugin.threshold | int }}</span>
                âˆž:&nbsp;<span id="cam_checkbox_hold_threshold_output">OFF</span>
                âŠž:&nbsp;<span id="cam_slider_krnl_output">{{ plugin.krnl }}</span>
            <br>
                Æ’L:&nbsp;<span id="cam_slider_f_limit_output">{{ plugin.tracker.f_limit }}</span>
                Æ’%:&nbsp;<span id="cam_slider_frm_delta_pcnt_output">{{ "{:.2f}".format(plugin.tracker.frm_delta_pcnt) }}</span>
            <br>
                <span id="crop_output" class="cam_slider_crop_stats">x:0 y:0 w:0 h:0</span>
                <span id="majic_color_span" class="cam_slider_crop_stats">{{ plugin.majic_color }}</span>
        </div>
    </div>

    <span id="cam_sliders" style="" class="cam_sliders highlight">
        <div id="cam_slider_threshold" style="position:absolute;left:0px;">
            âˆ‘<br><input id="cam_slider_threshold_input" style="height:100px;" class="cam_slider" orient="vertical" type="range" min="-100" max="100" step="1" value="{{ plugin.threshold | int }}" onChange="handleSlider(this);"/>
            <input id="cam_checkbox_hold_threshold_input" style="position:absolute;left:-20px;top:98px;" type="checkbox" {{ "checked" if plugin.hold_threshold is true }} onChange="handleCheckBox(this);"/>
        </div>
        <div id="cam_slider_krnl" style="position:absolute;top:0px;left:25px;">
            âŠž<br><input id="cam_slider_krnl_input" style="" class="cam_slider" orient="vertical" type="range" min="1" max="128" step="2" value="{{ plugin.krnl }}" onChange="handleSlider(this);"/>
        </div>
        <div id="cam_slider_f_limit" style="position:absolute;top:0px;left:50px;">
            Æ’L<br><input id="cam_slider_f_limit_input" style="" class="cam_slider" orient="vertical" type="range" min="1" max="60" step="1" value="{{ plugin.tracker.f_limit }}" onChange="handleSlider(this);"/>
        </div>
        <div id="cam_slider_frm_delta_pcnt" style="position:absolute;top:0px;left:100px;">
            Æ’%<br><input id="cam_slider_frm_delta_pcnt_input" style="" class="cam_slider" orient="vertical" type="range" min="0.00" max="100.00" step="0.01" value="{{ plugin.tracker.frm_delta_pcnt | float }}" onChange="handleSlider(this);"/>
        </div>
    </span>
</div>
</body>
</html>
