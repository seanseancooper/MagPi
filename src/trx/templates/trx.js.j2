{% if container %}
<div id="trx" class="module_tab" style="position:relative;display:none;">
{% else %}
<div id="trx" class="module_tab" style="position:relative;display:block;">
{% endif %}
    <script>
        var trx = new Tabulator("#trx", {
            ajaxURL:"http://view.localhost:5110/data/trx",      // request URI
            ajaxConfig:"GET",                                   // ajax config options go here
            dataLoaderLoading:dataLoaderLoading,                // change "Loading" message to "&nbsp;"
            index:"id",                                         // use unique  id as index
            // minHeight:435,                                   // set height of *table* (in CSS or here)

            rowFormatter:function(row){
                row.getElement().style = "height:24px";
            },

            persistence:{
                sort: true,                             //persist column sorting
                filter: true,                           //persist filters
                headerFilter: true,                     //persist header filters
                group: true,                            //persist row grouping
                page: true,                             //persist page
                columns: true,                          //persist columns
            },

            placeholder:"..." ,

            columns:[

                {field:"tracked", width:102, formatter: function(cell, formatterParams) {
                    var data = cell.getRow().getData();
                    const trgt = 'trx';

                    //  special processing to make string of hex look like a BSSID
                    var uniqId = data.id.replace('-','').substring(0,12).match(/.{1,2}/g).join(':');

                    var _color = colorUniqId(uniqId, ':');
                    var p_signal_color = 'rgba(' + _color + ', 1.0)';
                    var text_color = 'rgba(' + averageColor(_color) + ', 1.0)';

                    if (data.tracked == true) {
                        if (data.is_mute == false) {
                            return "<button id='remove_button_"+ data.id + "' style='width:24px;' class='trk_btn rem_button' value='"+data.id+"' data-action='REMOVE' data-target=" + trgt + ">x</button><button id='mute_button_" + data.id + "' style='color:" + text_color +"; background-color:" + p_signal_color +";' class='mute_btn unmute_button' value='" + data.id + "' data-action='MUTE' data-target=" + trgt + ">MUTE</button>";
                        } else {
                            return "<button id='remove_button_"+ data.id + "' style='width:24px;' class='trk_btn rem_button' value='"+data.id+"' data-action='REMOVE' data-target=" + trgt + ">x</button><button id='mute_button_" + data.id + "' style='color:" + text_color +"; background-color:" + p_signal_color +";' class='mute_btn   mute_button' value='" + data.id + "' data-action='MUTE' data-target=" + trgt + ">UNMUTE</button>";
                        }
                    } else {
                        return "<button id='add_button_" + data.id + "' style='width:96px;' class='trk_btn add_button button' value='"+data.id+"' data-action='ADD' data-target=" + trgt + ">ADD</button>";
                    }
                }},

                /*
                {title:"TYPE", field:"text_data.TYPE", cellClick:function(e, cell){
                    var data = cell.getRow().getData();
                    const trgt = 'trx';

                    function muteGroup(item, trgt) {
                        var mutables = [];
                        cellVal = data.text_data.TYPE;

                        Object.entries(data.attributes).forEach(([key, value]) => {
                            console.log(`${key} ${value}`);

                            var column = cell.getColumn();
                            var columnField = column.getField().replace('text_data.','');

                            if (cellVal != null && key == columnField && value == cellVal){
                                mutables.push(item);
                            }

                        });
                        //  iterate  over all the data
                        mutables.forEach(function(mutable){
                            add(mutable, trgt);
                            mute(mutable, trgt);
                        }
                    )};


                    if (muteGroup(data.id, trgt)) {
                        return "<div id='mute_button_" + data.id + "' style='background-color:#F00;' class='' value='" + data.id + "' data-action='MUTE' data-target=" + trgt + ">" +  data.text_data.TYPE + "</div>";
                    } else {
                        return "<div id='mute_button_" + data.id + "' style='background-color:#FFF;' class='' value='" + data.id + "' data-action='MUTE' data-target=" + trgt + ">" +  data.text_data.TYPE + "</div>";
                    }
                },  width:60},

                */
                {title:"TYPE", field:"text_data.TYPE", width:60},
                /**/
                {title:"TSYS_TYPE", field:"text_data.TSYS_TYPE", width:40},
                {title:"TSYS_ID", field:"text_data.TSYS_ID", width:90},

                {title:"SYSTEM", field:"text_data.SYSTEM", width:120},
                {title:"SITE", field:"text_data.SITE", width:120},
                {title:"ALPHATAG", field:"text_data.ALPHATAG", width:140},

                {title:"TGID1", field:"text_data.TGID1", width:70},
                {title:"TGID2", field:"text_data.TGID2", width:70},
                {title:"RID1", field:"text_data.RID1", width:70},
                {title:"RID2", field:"text_data.RID2", width:70},

                {title:"FREQ1", field:"text_data.FREQ1", width:80},
                {title:"FREQ2", field:"text_data.FREQ2", width:80}

            ],
        });

        </script>
</div>