<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>WifiScanner [ {{ scanner.polling_count }} ]</title>
    <link href="{{ url_for('wifi_bp.static', filename='tabulator/css/tabulator_midnight.min.css') }}" rel="stylesheet">
    <link rel="stylesheet" href="{{ url_for('wifi_bp.static', filename='css/wifi_scan.css') }}">

    <script type="text/javascript" src="{{ url_for('wifi_bp.static', filename='tabulator/js/tabulator.min.js') }}"></script>
    <script src="{{ url_for('wifi_bp.static', filename='js/peity-vanilla.js') }}"></script>

    <script>
        function setsHeaders(xhttp) {
            xhttp.setRequestHeader('Access-Control-Allow-Origin', 'localhost:*');
            xhttp.setRequestHeader('Access-Control-Allow-Methods', 'POST');
            xhttp.setRequestHeader('Content-Type', 'text/html');
            xhttp.setRequestHeader('Access-Control-Allow-Headers', 'Content-Type, Access-Control-*');
        }

        function mute(BSSID){
            var xhttp = new XMLHttpRequest();

            xhttp.open("POST", "{{ url_for('wifi_bp.wifi_mute', bssid=BSSID) }}" + BSSID, true);
            setsHeaders(xhttp);
            xhttp.send();

            xhttp.onload = function() {
                const resp = xhttp.response;
                var mButton = document.getElementById("wifi_mute_button_" + BSSID);

                if (resp == "False"){
                    mButton.classList.value = "muting_button";
                    mButton.innerHTML = "------";
                    setTimeout(function() {
                        mButton.classList.value = "mute_btn unmute_button";
                        mButton.innerHTML = "MUTE";
                    }, 250);
                }

                if (resp == "True"){
                    mButton.classList.value = "muting_button";
                    mButton.innerHTML = "------";
                    setTimeout(function() {
                        mButton.classList.value = "mute_btn mute_button";
                        mButton.innerHTML = "UNMUTE";
                    }, 250);
                };
            };
        }

        function add(BSSID){
            var xhttp = new XMLHttpRequest();
            xhttp.open("POST", "{{ url_for('wifi_bp.wifi_add', bssid=BSSID) }}" + BSSID, true);
            setsHeaders(xhttp);
            xhttp.send();

            xhttp.onload = function() {
                const resp = xhttp.response;
                var aButton = document.getElementById("wifi_add_button_" + BSSID);
                if (resp == "OK"){
                    aButton.classList.value = "adding_button";
                    aButton.innerHTML = "------";
                    setTimeout(function() {
                        aButton.classList.value = "add_btn added_button";
                        aButton.innerHTML = "ADDED";
                    }, 250);
                } else {
                    aButton.classList.value = "adding_failed_button";
                    aButton.innerHTML = "FAILED!";
                };
            };
        }

        function remove(BSSID){
            var xhttp = new XMLHttpRequest();
            xhttp.open("POST", "{{ url_for('wifi_bp.wifi_remove', bssid=BSSID) }}" + BSSID, true);
            setsHeaders(xhttp);
            xhttp.send();

            xhttp.onload = function() {
                const resp = xhttp.response;
                rButton = document.getElementById("wifi_remove_button_" + BSSID);
                if (resp == "OK"){
                    rButton.classList.value = "rem_button";
                    rButton.style = "color:white;";
                    rButton.innerHTML = "*";
                    setTimeout(function() {
                        mButton = document.getElementById("wifi_mute_button_" + BSSID);
                        uButton = document.getElementById("wifi_unmute_button_" + BSSID);

                        if (mButton) {
                                mButton.style = "display:none;"
                        };

                        if (uButton) {
                                uButton.style = "display:none;"
                        };

                        // note width increase
                        rButton.classList.value = "rem_button removed_button button";
                        rButton.innerHTML = "REMOVED";

                    }, 250);
                } else {
                    rButton.classList.value = "remove_failed_button";
                    rButton.innerHTML = "x";
                };
            };
        }

        function write_tracked(button){

            var xhttp = new XMLHttpRequest();

            xhttp.open('POST', "{{ url_for('wifi_bp.wifi_write') }}");
            setsHeaders(xhttp);
            xhttp.send();

            xhttp.onload = function() {
                document.getElementById("write_button").innerHTML = (xhttp.response == "OK")? "DONE": "FAILED";
            };
        }
    </script>
</head>
<body onLoad="load_wifi();">
    <div id="wifi_scanner_filters" style="" class="wifi_scanner_filters">
        <select id="filter-field">
            <option></option>
            <option value="is_mute">Muted</option>
            <option value="tracked">Tracked</option>
            <option value="SSID">SSID</option>
            <option value="BSSID">BSSID</option>
            <option value="Signal">Signal</option>
            <option value="Channel">Channel</option>
            <option value="Frequency">Frequency</option>
            <option value="Quality">Quality</option>
            <option value="Encryption">Encryption</option>
            <option value="Vendor">Vendor</option>
            <option value="created">Found</option>
            <option value="updated">Last</option>
        </select>
        <select id="filter-type">
            <option value="=">=</option>
            <option value="<"><</option>
            <option value="<="><=</option>
            <option value=">">></option>
            <option value=">=">>=</option>
            <option value="!=">!=</option>
            <option value="like">like</option>
        </select>
        <input id="filter-value" type="text" placeholder="value to filter">
        <button id="filter-clear" class="clear_button">
            <span id="clear_button_text">CLEAR</span>
        </button>
    </div>

    <div id="wifi_scanner_buttons" style="" class="wifi_scanner_buttons" >
        <button id="all_button" class="all_button" value="" onClick="select_all(true);">
            <span id="all_button_text">ALL</span>
        </button>
        <button id="none_button" class="none_button" value="" onClick="select_all(false);">
            <span id="none_button_text">NONE</span>
        </button>
        <button id="write_button" class="write_button" value="" onClick="write_tracked();">
            <span id="write_button_text">WRITE</span>
        </button>
        <button id="load_button" class="reload_button" value="" onClick="load_wifi_now();">
            <span id="load_button_text">RELOAD</span>
        </button>
        <span id="wifi_scanner_stats" style="" class="wifi_scanner_stats">
            {{ scanner.workers|length }} SIGNALS | {{ scanner.elapsed }} ELAPSED
        </span>
    </div>

    <div id="wifi_scanner"></div>
    <div id="wifi_ghosts"></div>
    <script>

    // Define variables for input elements
    var fieldEl = document.getElementById("filter-field");
    var typeEl = document.getElementById("filter-type");
    var valueEl = document.getElementById("filter-value");

    // filter
    function customFilter(data){
        return data.field1 && data.field2 < 3;
    }

    // Trigger setFilter function with correct parameters
    function updateFilter(){
      var filterVal = fieldEl.options[fieldEl.selectedIndex].value;
      var typeVal = typeEl.options[typeEl.selectedIndex].value;

      // enable filter
      var filter = filterVal == "function" ? customFilter : filterVal;

      if(filterVal == "function" ){
        typeEl.disabled = true;
        valueEl.disabled = true;
      } else {
        typeEl.disabled = false;
        valueEl.disabled = false;
      }

      if(filterVal){
        table.setFilter(filter,typeVal, valueEl.value);
      }
    }

    fieldEl.addEventListener("change", updateFilter);
    typeEl.addEventListener("change", updateFilter);
    valueEl.addEventListener("keyup", updateFilter);

    document.getElementById("filter-clear").addEventListener("click", function(){
      fieldEl.value = "";
      typeEl.value = "=";
      valueEl.value = "";

      table.clearFilter();
    });

    // Formatter to generate peity charts
    var chartFormatter = function(cell, formatterParams, onRendered){
        var content = document.createElement("span");
        var values = cell.getValue();

        if(formatterParams.invert){
            values = values.map(val => val * -1);
        };

        content.classList.add(formatterParams.type);
        content.innerHTML = values.join(",");

        var options = {
            width: 150,
        }

        if(formatterParams.fill){
            options.fill = formatterParams.fill
        }

        // instantiate piety chart after the cell element has been added to the DOM
        onRendered(function(){
            peity(content, formatterParams.type,  options);
        });

        return content;
    };

    // Formatter to generate SSID Quality indicia
    var ssidFormatter = function(cell, params){
        var content = document.createElement("span");

		max = params && params.max ? params.max : 100;
		min = params && params.min ? params.min : 0;
		var colors = params.colors;
		var color = "#666666";
		var percent;
		var percentValue;

        const data = cell.getRow().getData();
        var value = data.Quality;

		if(isNaN(value) || typeof cell.getValue() === "undefined"){
			return;
		}

		//make sure value is in range
		percentValue = parseFloat(value) <= max ? parseFloat(value) : max;
		percentValue = parseFloat(percentValue) >= min ? parseFloat(percentValue) : min;

		//workout percentage
		percent = (max - min) / 100;
		percentValue = Math.round((percentValue - min) / percent);

        var unit = 100 / colors.length;
        var index = Math.floor(percentValue / unit);

        index = Math.min(index, colors.length - 1);
        index = Math.max(index, 0);

        let qualcolor = colors[index];
        content.innerHTML = "<div id=\"SSID\" style=\"position:absolute;left:10px;display:inline-block;\">" + data.SSID + "</div>&nbsp;<span id=\"quality_ind\" class=\"\" style=\"position:absolute;top:0px;left:0px;text-align:right;background:" + qualcolor + ";width:6px;height:24px;\">&nbsp;</span>";

        return content
    };

    peity.defaults.line = {
        delimiter: ",",
        fill: "#777",
        height: 18,
        max: -100,
        min: 0,
        stroke: "#00ff00",
        strokeWidth: 2
    }
    const dataLoaderLoading = "&nbsp;";

    Tabulator.extendModule("mutator", "mutators", {
        signalMutator:function(value, data, type, mutatorParams){

            var sgnlList = []
            for (const pt of value) {
                let json = JSON.parse(pt)
                sgnlList.push(json['sgnl'])
            }
            return sgnlList;
        },
    });


    var table = new Tabulator("#wifi_scanner", {
        ajaxURL:"{{ url_for('wifi_bp.wifi_scan') }}",   // request URI
        ajaxConfig:"GET",                               // ajax config options go here
        dataLoaderLoading:dataLoaderLoading,            // change "Loading" message to "&nbsp;"

        index:"BSSID",                                  // use BSSID as index
        // minHeight:435,                               // set height of *table* (in CSS or here)
        minwidth: 30,

        rowFormatter:function(row){
            row.getElement().style = "height:24px";
        },

        persistence:{
            sort: true,                             //persist column sorting
            filter: true,                           //persist filters
            headerFilter: true,                     //persist header filters
            group: true,                            //persist row grouping
            page: true,                             //persist page
            // columns: true,                          //persist columns
        },

        placeholder:"..." ,

        columns:[
            {field:"tracked", width:102, formatter: function(cell, formatterParams) {
                const data = cell.getRow().getData();

                let _color = (function(){
                       var parts = data.BSSID.split(':');
                       var R = (parseInt(parts[0], 16) + parseInt(parts[1], 16)) % 255;
                       var G = (parseInt(parts[2], 16) + parseInt(parts[3], 16)) % 255;
                       var B = (parseInt(parts[4], 16) + parseInt(parts[5], 16)) % 255;
                       return R.toString(16)+G.toString(16)+B.toString(16)
                })(data.BSSID);

                if (data.tracked == true) {
                    if (data.is_mute == false) {
                        return "<button id='wifi_remove_button_"+ data.BSSID + "' style=\"width:24px;\" class=\"trk_btn rem_button\" value='"+data.BSSID+"' data-action='REMOVE'>x</button><button id='wifi_mute_button_" + data.BSSID + "' style='background-color:#" + _color +";' class='mute_btn unmute_button' value='" + data.BSSID + "' data-action='MUTE'>MUTE</button>";
                    } else {
                        return "<button id='wifi_remove_button_"+ data.BSSID + "' style=\"width:24px;\" class=\"trk_btn rem_button\" value='"+data.BSSID+"' data-action='REMOVE'>x</button><button id='wifi_mute_button_" + data.BSSID + "' style='background-color:#" + _color +";' class='mute_btn   mute_button' value='" + data.BSSID + "' data-action='MUTE'>UNMUTE</button>";
                    }
                } else {
                    return "<button id='wifi_add_button_" + data.BSSID + "' style='width:96px;' class='trk_btn add_button button' value='"+data.BSSID+"' data-action='ADD'>ADD</button>";
                }
            }},
            {title:"SSID", field:"SSID", formatter:ssidFormatter, formatterParams:{
                field:"Quality",
                colors:["red", "orange", "yellow", "#008800", "#00FF00"]
                },
                width:140,
            },
            {title:"BSSID", field:"BSSID", width:120},
            {title:"History", field:"signal_cache", mutator:"signalMutator",  width:162, formatter:chartFormatter, formatterParams:{
                type:"line"}
            },

            {title:"db", field:"Signal", width:30},
            {title:"Ch.", field:"Channel", width:50},
            {title:"Freq.", field:"Frequency", width:70},
            {title:"Sec.", field:"Encryption", formatter: "tickCross", width:30},
            {title:"Vendor", field:"Vendor", width:100},
            {title:"Elapsed", field:"elapsed", width:75},
            {title:"Created", field:"created", width:75},
            {title:"Last", field:"updated", width:75},

        ],
    });

    var ghosts = new Tabulator("#wifi_ghosts", {
        ajaxURL:"{{ url_for('wifi_bp.wifi_ghosts') }}", // request URI
        ajaxConfig:"GET",                               // ajax config options go here
        headerVisible:false,                            //hide header
        dataLoaderLoading:dataLoaderLoading,            // change "Loading" message to "&nbsp;"
        index:"BSSID",                                  // use BSSID as index
        minwidth: 30,

        rowFormatter:function(row){
            row.getElement().style = "height:24px";
            if(row.getData().tracked == true){
                row.getElement().style.backgroundColor = "#999999";
            }
        },

        columns:[
            {field:"tracked", width:102, formatter: function(cell, formatterParams) {
                const data = cell.getRow().getData();

                let _color = (function(){

                       var parts = data.BSSID.split(':');
                       var R = (parseInt(parts[0], 16) + parseInt(parts[1], 16)) % 255;
                       var G = (parseInt(parts[2], 16) + parseInt(parts[3], 16)) % 255;
                       var B = (parseInt(parts[4], 16) + parseInt(parts[5], 16)) % 255;
                       console.log('BSSID: '  + data.BSSID)

                       console.log("R:" + R.toString(16))
                       console.log("G:" + G.toString(16))
                       console.log("B:" + B.toString(16))

                       return R.toString(16) + G.toString(16) + B.toString(16)
                })(data.BSSID);

                if (data.is_mute == false) {
                    return "<button id='wifi_remove_button_"+ data.BSSID + "' style=\"width:24px;\" class=\"trk_btn rem_button\" value='"+data.BSSID+"' data-action='REMOVE'>x</button><button id='wifi_mute_button_" + data.BSSID + "' style='background-color:#" + _color +";' class='mute_btn unmute_button' value='" + data.BSSID + "' data-action='MUTE'>MUTE</button>";
                } else {
                    return "<button id='wifi_remove_button_"+ data.BSSID + "' style=\"width:24px;\" class=\"trk_btn rem_button\" value='"+data.BSSID+"' data-action='REMOVE'>x</button><button id='wifi_mute_button_" + data.BSSID + "' style='background-color:#" + _color +";' class='mute_btn   mute_button' value='" + data.BSSID + "' data-action='MUTE'>UNMUTE</button>";
                }
            }},
            {title:"SSID", field:"SSID", formatter:ssidFormatter, formatterParams:{
                field:"Quality",
                colors:["red", "orange", "yellow", "#008800", "#00FF00"]
                },
                width:140,
            },
            {title:"BSSID", field:"BSSID", width:120},
            {title:"History", field:"signal_cache", mutator:"signalMutator",  width:162, formatter:chartFormatter, formatterParams:{
                type:"line"}
            },

            {title:"db", field:"Signal", width:30},         // perhaps the last known strength?? an average??
            {title:"Ch.", field:"Channel", width:50},
            {title:"Freq.", field:"Frequency", width:70},
            {title:"Sec.", field:"Encryption", formatter: "tickCross", width:30},
            {title:"Vendor", field:"Vendor", width:100},
            {title:"Elapsed", field:"elapsed", width:75},
            {title:"Created", field:"created", width:75},
            {title:"Last", field:"updated", width:75},

        ],
    });

    scanner_elements = [];
    scanner_elements.push(document.getElementById('wifi_scanner'));
    scanner_elements.push(document.getElementById('wifi_ghosts'));
    scanner_elements.push(document.getElementById("all_button"));
    scanner_elements.push(document.getElementById("none_button"));

    scanner_elements.forEach(function(element) {

        element.addEventListener('click', function(event) {

            if (event.target.classList.contains('trk_btn')) {
                if (event.target.classList.contains('add_button')) {
                    add(event.target.value);
                };
                if (event.target.classList.contains('rem_button')) {
                    remove(event.target.value)
                };
            };

            if (event.target.classList.contains('mute_btn')) {
                mute(event.target.value);
            };

            if (event.target.classList.contains('all_button')) {
                alert('select all');
            };

            if (event.target.classList.contains('none_button')) {
                alert('select none');
            };

        });
    });

    function load_wifi_now(){
        document.location.reload()
    }

    function load_wifi(){
        /* for now, this reloads wifi scanner */
        setTimeout(function(){
            load_wifi_now()
        }, 60000);
    }


    load_wifi();
    </script>
</body>
</html>