<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>WifiScanner [ {{ scanner.polling_count }} ]</title>
    <link href="{{ url_for('wifi_bp.static', filename='tabulator/css/tabulator_midnight.min.css') }}" rel="stylesheet">
    <link rel="stylesheet" href="{{ url_for('wifi_bp.static', filename='css/wifi_scan.css') }}">

    <script type="text/javascript" src="{{ url_for('wifi_bp.static', filename='tabulator/js/tabulator.min.js') }}"></script>
    <script src="{{ url_for('wifi_bp.static', filename='js/peity-vanilla.js') }}"></script>

    <script>
        const SCAN_TIMEOUT = {{ scanner.config.get('VIEW_TIMEOUT') * 1000 }}

        function setsHeaders(xhttp) {
            xhttp.setRequestHeader('Access-Control-Allow-Origin', 'localhost:*');
            xhttp.setRequestHeader('Access-Control-Allow-Methods', 'POST');
            xhttp.setRequestHeader('Content-Type', 'text/html');
            xhttp.setRequestHeader('Access-Control-Allow-Headers', 'Content-Type, Access-Control-*');
        }

        function add(uniqId, trgt){
            var xhttp = new XMLHttpRequest();
            xhttp.open("POST", "{{ url_for('.index')}}add/" + uniqId, true);
            setsHeaders(xhttp);
            xhttp.setRequestHeader('TARGET', trgt);
            xhttp.send();

            xhttp.onload = function() {
                const resp = xhttp.response;
                var aButton = document.getElementById("add_button_" + uniqId);
                if (resp == "OK"){
                    aButton.classList.value = "adding_button";
                    aButton.innerHTML = "------";
                    setTimeout(function() {
                        aButton.classList.value = "add_btn added_button";
                        aButton.innerHTML = "ADDED";
                    }, 250);
                } else {
                    aButton.classList.value = "adding_failed_button";
                    aButton.innerHTML = "FAILED!";
                };
            };
        }

        function mute(uniqId, trgt){
            var xhttp = new XMLHttpRequest();

            xhttp.open("POST", "{{ url_for('.index')}}mute/" + uniqId, true);
            setsHeaders(xhttp);
            xhttp.setRequestHeader('TARGET', trgt);
            xhttp.send();

            xhttp.onload = function() {
                const resp = xhttp.response;
                var mButton = document.getElementById("mute_button_" + uniqId);

                if (resp == "False"){
                    mButton.classList.value = "muting_button";
                    mButton.innerHTML = "------";
                    setTimeout(function() {
                        mButton.classList.value = "mute_btn unmute_button";
                        mButton.innerHTML = "MUTE";
                    }, 250);
                }

                if (resp == "True"){
                    mButton.classList.value = "muting_button";
                    mButton.innerHTML = "------";
                    setTimeout(function() {
                        mButton.classList.value = "mute_btn mute_button";
                        mButton.innerHTML = "UNMUTE";
                    }, 250);
                };
            };
        }

        function remove(uniqId, trgt){
            var xhttp = new XMLHttpRequest();
            xhttp.open("POST", "{{ url_for('.index')}}remove/" + uniqId, true);
            setsHeaders(xhttp);
            xhttp.setRequestHeader('TARGET', trgt);
            xhttp.send();

            xhttp.onload = function() {
                const resp = xhttp.response;
                rButton = document.getElementById("remove_button_" + uniqId);
                if (resp == "OK"){
                    rButton.classList.value = "rem_button";
                    rButton.style = "color:white;";
                    rButton.innerHTML = "*";
                    setTimeout(function() {
                        mButton = document.getElementById("mute_button_" + uniqId);
                        uButton = document.getElementById("unmute_button_" + uniqId);

                        if (mButton) {
                                mButton.style = "display:none;"
                        };

                        if (uButton) {
                                uButton.style = "display:none;"
                        };

                        // note width increase
                        rButton.classList.value = "rem_button removed_button button";
                        rButton.innerHTML = "REMOVED";

                    }, 250);
                } else {
                    rButton.classList.value = "remove_failed_button";
                    rButton.innerHTML = "x";
                };
            };
        }

        function write_tracked(button, trgt){

            var xhttp = new XMLHttpRequest();

            xhttp.open('POST', "{{ url_for('.index')}}write/", true);
            setsHeaders(xhttp);
            xhttp.setRequestHeader('TARGET', trgt);
            xhttp.send();

            xhttp.onload = function() {
                document.getElementById("write_button").innerHTML = (xhttp.response == "OK")? "DONE": "FAILED";
            };
        }

        function loadTab(event, tabName){

            var i, tabcontent, tablinks;
            tabcontent = document.getElementsByClassName("tabcontent");

            for (i = 0; i < tabcontent.length; i++) {
                tabcontent[i].style.display = "none";
            }

            // Get all elements with class="tablinks" and remove the class "active"
            tablinks = document.getElementsByClassName("tab_button");
            for (i = 0; i < tablinks.length; i++) {
                tablinks[i].className = tablinks[i].className.replace(" active", "");
            }

            // Show the current tab, and add an "active" class to the button that opened the tab
            document.getElementById(tabName).style.display = "block";
            event.currentTarget.className += " active";

        }

        function reload(){
            document.location.reload();
        }

        function replace_data(){
            // use foreach...
            scanner.replaceData();
            tracked.replaceData();
            ghosts.replaceData();
        }

        /*
        a draggable bar would be nice to have!
        https://codepen.io/manishady/pen/xGYvEK
        https://codepen.io/GreenSock/pen/eRBdzM
        */

        function make_deadline_bar() {

            var iteration = 0;
            let iter_timeout = 100;
            var bar_div = document.createElement('div');
            bar_div.id = 'bar_div';

            function update_deadline_bar() {

                setTimeout(function() {

                    bar_div.className = 'bar';
                    var percentage = (iteration * iter_timeout)/SCAN_TIMEOUT * 100;

                    document.getElementById('bar_div').style = "background-color:rgba(0,255,0,0.50);transition: all " + 0.1 +"s;";
                    document.getElementById('bar_div').style.width = 100 - percentage + '%';

                    if (percentage >= 100){
                        replace_data();
                        iteration = 0;
                    }

                    update_deadline_bar();
                    iteration++;

                }, iter_timeout);
            }
            document.getElementById('meter').appendChild(bar_div);
            update_deadline_bar();
        }
    </script>
</head>
<body>
    <div id="bar_container" style="padding-top:2px;padding-bottom:3px;" class="bar_container">
        <div id="meter" style=""><script>make_deadline_bar();</script></div>
    </div>

    <div id="tabs" style="height:30px">
        <button id="scanner_tab_scanner" class="tab_button" onclick="loadTab(event, 'wifi_scanner')">WIFI 00:00:00</button>
        <button id="scanner_tab_tracked" class="tab_button" onclick="loadTab(event, 'wifi_tracked')">99 WIFI TRACKED</button>
        <button id="scanner_tab_ghosts" class="tab_button" onclick="loadTab(event, 'wifi_ghosts')">99 WIFI GHOSTS</button>
    </div>

    <div id="scanner_filters" style="" class="scanner_filters">
        <select id="filter-field">
            <option></option>
            <option value="is_mute">Muted</option>
            <option value="tracked">Tracked</option>
            <option value="SSID">SSID</option>
            <option value="BSSID">BSSID</option>
            <option value="Signal">Signal</option>
            <option value="Channel">Channel</option>
            <option value="Frequency">Frequency</option>
            <option value="Quality">Quality</option>
            <option value="Encryption">Encryption</option>
            <option value="Vendor">Vendor</option>
            <option value="created">Found</option>
            <option value="updated">Last</option>
        </select>
        <select id="filter-type">
            <option value="=">=</option>
            <option value="<"><</option>
            <option value="<="><=</option>
            <option value=">">></option>
            <option value=">=">>=</option>
            <option value="!=">!=</option>
            <option value="like">like</option>
        </select>
        <input id="filter-value" type="text" size="16"  placeholder="value to filter">
        <button id="filter-clear" class="clear_button">
            <span id="clear_button_text">CLEAR</span>
        </button>

        <button id="all_button" class="all_button" value="" onClick="select_all(true);">
            <span id="all_button_text">ALL</span>
        </button>
        <button id="none_button" class="none_button" value="" onClick="select_all(false);">
            <span id="none_button_text">NONE</span>
        </button>
        <button id="write_button" class="write_button" value="" onClick="write_tracked();">
            <span id="write_button_text">WRITE</span>
        </button>
        <button id="load_button" class="reload_button" value="" onClick="reload();">
            <span id="load_button_text">RELOAD</span>
        </button>
        <span id="scanner_stats" style="" class="scanner_stats">
            {{ scanner.workers|length }} SIGNALS | {{ scanner.elapsed }} ELAPSED
        </span>

    </div>

    <div id="wifi_scanner" class="tabcontent"></div>
    <div id="wifi_tracked" class="tabcontent" style="display:none;"></div>
    <div id="wifi_ghosts" class="tabcontent" style="display:none;"></div>

    <script>

    const dataLoaderLoading = "&nbsp;";

    var fieldEl = document.getElementById("filter-field");
    var typeEl = document.getElementById("filter-type");
    var valueEl = document.getElementById("filter-value");

    function customFilter(data){
        return data.field1 && data.field2 < 3;
    }

    function updateFilter(){
        var filterVal = fieldEl.options[fieldEl.selectedIndex].value;
        var typeVal = typeEl.options[typeEl.selectedIndex].value;
        var filter = filterVal == "function" ? customFilter : filterVal;

        if(filterVal == "function" ){
            typeEl.disabled = true;
            valueEl.disabled = true;
        } else {
            typeEl.disabled = false;
            valueEl.disabled = false;
        }

        if(filterVal){
            //  scanner is the tabulator code 'var scanner  = '; make it indirect against a tab
            scanner.setFilter(filter,typeVal, valueEl.value);
        }
    }

    fieldEl.addEventListener("change", updateFilter);
    typeEl.addEventListener("change", updateFilter);
    valueEl.addEventListener("keyup", updateFilter);

    document.getElementById("filter-clear").addEventListener("click", function(){
        fieldEl.value = "";
        typeEl.value = "=";
        valueEl.value = "";

        // here too!
        scanner.clearFilter();
    });

    // Formatter to generate peity charts
    var chartFormatter = function(cell, formatterParams, onRendered){

        var content = document.createElement("span");
        var values = cell.getValue();
        content.classList.add('line');
        content.innerHTML = values.join(",");

        // after the cell element has been added to the DOM
        onRendered(function(){
            peity(content, 'line');
        });

        return content;
    };

    Tabulator.extendModule("mutator", "mutators", {
        signalMutator:function(value, data, type, mutatorParams){

            var sgnlList = [];
            for (const pt of value) {
                let json = JSON.parse(pt)
                sgnlList.push(json['sgnl'])
            }
            return sgnlList;

        },
    });

    peity.defaults.line = {
        delimiter: ",",
        fill: "#777",
        height: 18,
        width: 150,
        max: -100,
        min: 0,
        stroke: "#00ff00",
        strokeWidth: 2
    }

    // Formatter to generate SSID Quality indicia
    var ssidFormatter = function(cell, params){
        var content = document.createElement("span");

		max = params && params.max ? params.max : 100;
		min = params && params.min ? params.min : 0;
		var colors = params.colors;
		var color = "#666666";
		var percent;
		var percentValue;

        const data = cell.getRow().getData();
        var value = data.Quality;

		if(isNaN(value) || typeof cell.getValue() === "undefined"){
			return;
		}

		// is value in range
		percentValue = parseFloat(value) <= max ? parseFloat(value) : max;
		percentValue = parseFloat(percentValue) >= min ? parseFloat(percentValue) : min;

		percent = (max - min) / 100;
		percentValue = Math.round((percentValue - min) / percent);

        var unit = 100 / colors.length;
        var index = Math.floor(percentValue / unit);

        index = Math.min(index, colors.length - 1);
        index = Math.max(index, 0);

        let qualcolor = colors[index];
        content.innerHTML = "<div id='SSID' style='position:absolute;left:10px;display:inline-block;'>" + data.SSID + "</div>&nbsp;<span id='quality_ind' class='' style='position:absolute;top:0px;left:0px;text-align:right;background:" + qualcolor + ";width:6px;height:24px;'>&nbsp;</span>";

        return content
    };

    // Formatter to generate uniqId links
    var uniqIdFormatter = function(cell, params){
        var content = document.createElement("span");
        const data = cell.getRow().getData();
        var url = "http://wifi.localhost:5006/scan/" + data.BSSID;

        content.innerHTML = "<div id='BSSID' style='position:absolute;left:7px;display:inline-block;'><a style='color:#FFFFFF;text-decoration:none;' href=" + url + ">" + data.BSSID + "</a></div>";
        return content
    };

    // colors based on BSSID like values and ad hoc splitter
    function colorUniqId(data, splt){
           var parts = data.split(splt);
           var R = (parseInt(parts[0], 16) + parseInt(parts[1], 16)) % 255;
           var G = (parseInt(parts[2], 16) + parseInt(parts[3], 16)) % 255;
           var B = (parseInt(parts[4], 16) + parseInt(parts[5], 16)) % 255;
           return [R,G,B];
    };

    function averageColor([R,G,B]){
           let avg = R+G+B/3;
           return (avg > 128)? "00,00,00": "255,255,255";
    };

    scanner_elements = [];
    scanner_elements.push(document.getElementById('wifi_scanner'));
    scanner_elements.push(document.getElementById('wifi_tracked'));
    scanner_elements.push(document.getElementById('wifi_ghosts'));

    scanner_elements.push(document.getElementById("all_button"));
    scanner_elements.push(document.getElementById("none_button"));

    scanner_elements.forEach(function(element) {

        element.addEventListener('click', function(event) {

            if (event.target.classList.contains('trk_btn')) {
                if (event.target.classList.contains('add_button')) {
                    add(event.target.value, event.target.attributes['data-trgt'].value);
                };
                if (event.target.classList.contains('rem_button')) {
                    remove(event.target.value, event.target.attributes['data-trgt'].value)
                };
            };

            if (event.target.classList.contains('mute_btn')) {
                mute(event.target.value, event.target.attributes['data-trgt'].value);
            };

            if (event.target.classList.contains('all_button')) {
                alert('select all');
            };

            if (event.target.classList.contains('none_button')) {
                alert('select none');
            };

        });
    });

    var scanner = new Tabulator("#wifi_scanner", {
        ajaxURL:"http://wifi.localhost:5006/scan",    // request URI
        ajaxConfig:"GET",                                       // ajax config options go here
        dataLoaderLoading:dataLoaderLoading,                    // change "Loading" message to "&nbsp;"
        index:"BSSID",                                          // use uniqId as index

        rowFormatter:function(row){
            row.getElement().style = "height:24px";
        },

        persistence:{
            sort: true,                             //persist column sorting
            filter: true,                           //persist filters
            headerFilter: true,                     //persist header filters
            group: true,                            //persist row grouping
            page: true,                             //persist page
            columns: false,                         //persist columns
        },

        placeholder:"..." ,

        columns:[
            {field:"tracked", width:102, formatter: function(cell, formatterParams) {
                const data = cell.getRow().getData();
                const trgt = 'wifi';

                var _color = colorUniqId(data.BSSID, ':');
                var p_signal_color = 'rgba(' + _color + ', 1.0)';
                var text_color = 'rgba(' + averageColor(_color) + ', 1.0)';

                if (data.tracked == true) {
                    if (data.is_mute == false) {
                        return "<button id='remove_button_"+ data.BSSID + "' style='width:24px;' class='trk_btn rem_button' value='"+data.BSSID+"' data-action='REMOVE' data-trgt=" + trgt + ">x</button><button id='mute_button_" + data.BSSID + "' style='color:" + text_color +"; background-color:" + p_signal_color +";' class='mute_btn unmute_button' value='" + data.BSSID + "' data-action='MUTE' data-trgt=" + trgt + ">MUTE</button>";
                    } else {
                        return "<button id='remove_button_"+ data.BSSID + "' style='width:24px;' class='trk_btn rem_button' value='"+data.BSSID+"' data-action='REMOVE' data-trgt=" + trgt + ">x</button><button id='mute_button_" + data.BSSID + "' style='color:" + text_color +"; background-color:" + p_signal_color +";' class='mute_btn   mute_button' value='" + data.BSSID + "' data-action='MUTE' data-trgt=" + trgt + ">UNMUTE</button>";
                    }
                } else {
                    return "<button id='add_button_" + data.BSSID + "' style='width:96px;' class='trk_btn add_button button' value='"+data.BSSID+"' data-action='ADD' data-trgt=" + trgt + ">ADD</button>";
                }
            }},
            {field:"tracked", width:102, formatter: function(cell, formatterParams) {
                const data = cell.getRow().getData();
                const trgt = 'wifi';

                var _color = colorUniqId(data.BSSID, ':');
                var p_signal_color = 'rgba(' + _color + ', 1.0)';
                var text_color = 'rgba(' + averageColor(_color) + ', 1.0)';
                if (true) {
                    return "<button id='ACTION_button_" + data.BSSID + "' style='width:96px;' class='trk_btn ACTION_button button' value='"+data.BSSID+"' data-action='ACTION' data-trgt=" + trgt + ">ACTION</button>";
                }
            }},
            {title:"SSID", field:"SSID", width:140, formatter:ssidFormatter, formatterParams:{
                field:"Quality",
                colors:["red", "orange", "yellow", "#008800", "#00FF00"]
            }},
            {title:"BSSID", field:"BSSID", width:120},
            /*
            {title:"BSSID", field:"BSSID", width:120, formatter:bssidFormatter, formatterParams:{
                field: "BSSID"
            }},
            */
            {title:"History", field:"signal_cache", mutator:"signalMutator",  width:162, formatter:chartFormatter,
                    // cellClick:function(e, cell){console.log(cell.getValue())}
            },
            {title:"db", field:"Signal", width:30},
            {title:"Ch.", field:"Channel", width:50},
            {title:"Freq.", field:"Frequency", width:70},
            {title:"Sec.", field:"Encryption", formatter: "tickCross", width:30},
            {title:"Vendor", field:"Vendor", width:100},


            {title:"Elapsed", field:"elapsed", width:75},
            {title:"Created", field:"created", width:75},
            {title:"Last", field:"updated", width:75},

        ],
    });

    var tracked = new Tabulator("#wifi_tracked", {
        ajaxURL:"http://wifi.localhost:5006/tracked",    // request URI
        ajaxConfig:"GET",                                               // ajax config options go here
        headerVisible:true,                                             // show header
        dataLoaderLoading:dataLoaderLoading,                            // change "Loading" message to "&nbsp;"
        index:"BSSID",                                                  // use BSSID as index

        rowFormatter:function(row){
            row.getElement().style = "height:24px";
            if(row.getData().tracked == true){
                row.getElement().style.backgroundColor = "#777777";
            }
        },

        columns:[
            {field:"tracked", width:102, formatter: function(cell, formatterParams) {
                var data = cell.getRow().getData();
                const trgt = 'wifi';

                var _color = colorUniqId(data.BSSID, ':');
                var p_signal_color = 'rgba(' + _color + ', 1.0)';
                var text_color = 'rgba(' + averageColor(_color) + ', 1.0)';

                if (data.is_mute == false) {
                    return "<button id='remove_button_"+ data.BSSID + "' style='width:24px;' class='trk_btn rem_button' value='"+data.BSSID+"' data-action='REMOVE' data-trgt=" + trgt + ">x</button><button id='mute_button_" + data.BSSID + "' style='color:" + text_color +"; background-color:" + p_signal_color +";' class='mute_btn unmute_button' value='" + data.BSSID + "' data-action='MUTE' data-trgt=" + trgt + ">MUTE</button>";
                } else {
                    return "<button id='remove_button_"+ data.BSSID + "' style='width:24px;' class='trk_btn rem_button' value='"+data.BSSID+"' data-action='REMOVE' data-trgt=" + trgt + ">x</button><button id='mute_button_" + data.BSSID + "' style='color:" + text_color +"; background-color:" + p_signal_color +";' class='mute_btn   mute_button' value='" + data.BSSID + "' data-action='MUTE' data-trgt=" + trgt + ">UNMUTE</button>";
                }
            }},
            {title:"SSID", field:"SSID", formatter:ssidFormatter, formatterParams:{
                field:"Quality",
                colors:["red", "orange", "yellow", "#008800", "#00FF00"]
                },
                width:140,
            },
            {title:"BSSID", field:"BSSID", width:120},
            {title:"History", field:"signal_cache", mutator:"signalMutator",  width:162, formatter:chartFormatter, formatterParams:{
                type:"line"}
            },

            {title:"db", field:"Signal", width:30},         // perhaps the last known strength?? an average??
            {title:"Ch.", field:"Channel", width:50},
            {title:"Freq.", field:"Frequency", width:70},
            {title:"Sec.", field:"Encryption", formatter: "tickCross", width:30},
            {title:"Vendor", field:"Vendor", width:100},
            {title:"Elapsed", field:"elapsed", width:75},
            {title:"Created", field:"created", width:75},
            {title:"Last", field:"updated", width:75},

        ],
    });

    var ghosts = new Tabulator("#wifi_ghosts", {
        ajaxURL:"http://wifi.localhost:5006/ghosts",     // request URI
        ajaxConfig:"GET",                                               // ajax config options go here
        headerVisible:true,                                             // show header
        dataLoaderLoading:dataLoaderLoading,                            // change "Loading" message to "&nbsp;"
        index:"BSSID",                                                  // use BSSID as index

        rowFormatter:function(row){
            row.getElement().style = "height:24px";
            row.getElement().style.backgroundColor = "#999999";
        },

        columns:[
            {field:"tracked", width:102, formatter: function(cell, formatterParams) {
                var data = cell.getRow().getData();
                const trgt = 'wifi';

                var _color = colorUniqId(data.BSSID, ':');
                var p_signal_color = 'rgba(' + _color + ', 1.0)';
                var text_color = 'rgba(' + averageColor(_color) + ', 1.0)';

                if (data.is_mute == false) {
                    return "<button id='remove_button_"+ data.BSSID + "' style='width:24px;' class='trk_btn rem_button' value='"+data.BSSID+"' data-action='REMOVE' data-trgt=" + trgt + ">x</button><button id='mute_button_" + data.BSSID + "' style='color:" + text_color +"; background-color:" + p_signal_color +";' class='mute_btn unmute_button' value='" + data.BSSID + "' data-action='MUTE' data-trgt=" + trgt + ">MUTE</button>";
                } else {
                    return "<button id='remove_button_"+ data.BSSID + "' style='width:24px;' class='trk_btn rem_button' value='"+data.BSSID+"' data-action='REMOVE' data-trgt=" + trgt + ">x</button><button id='mute_button_" + data.BSSID + "' style='color:" + text_color +"; background-color:" + p_signal_color +";' class='mute_btn   mute_button' value='" + data.BSSID + "' data-action='MUTE' data-trgt=" + trgt + ">UNMUTE</button>";
                }
            }},
            {title:"SSID", field:"SSID", formatter:ssidFormatter, formatterParams:{
                field:"Quality",
                colors:["red", "orange", "yellow", "#008800", "#00FF00"]
                },
                width:140,
            },
            {title:"BSSID", field:"BSSID", width:120},
            {title:"History", field:"signal_cache", mutator:"signalMutator",  width:162, formatter:chartFormatter, formatterParams:{
                type:"line"}
            },

            {title:"db", field:"Signal", width:30},         // perhaps the last known strength?? an average??
            {title:"Ch.", field:"Channel", width:50},
            {title:"Freq.", field:"Frequency", width:70},
            {title:"Sec.", field:"Encryption", formatter: "tickCross", width:30},
            {title:"Vendor", field:"Vendor", width:100},
            {title:"Elapsed", field:"elapsed", width:75},
            {title:"Created", field:"created", width:75},
            {title:"Last", field:"updated", width:75},

        ],
    });
    </script>
</body>
</html>