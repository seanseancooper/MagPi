<div id="wifi" class="module_tab" style="position:relative;display:block;">
    <script>
        peity.defaults.line = {
            delimiter: ",",
            fill: "#777",
            height: 18,
            width: 150,
            max: -100,
            min: 0,
            stroke: "#00ff00",
            strokeWidth: 2
        }

        Tabulator.extendModule("mutator", "mutators", {
            signalMutator:function(value, data, type, mutatorParams){

            var sgnlList = [];
            for (const pt of value) {
                sgnlList.push(pt['sgnl'])
            }
            return sgnlList;

            },
        });

        // Formatter to generate peity charts
        var chartFormatter = function(cell, formatterParams, onRendered){

            var content = document.createElement("span");
            var values = cell.getValue();
            content.classList.add('line');
            content.innerHTML = values.join(",");

            // after the cell element has been added to the DOM
            onRendered(function(){
                peity(content, 'line');
            });

            return content;
        };

        // Formatter to generate SSID Quality indicia
        var ssidFormatter = function(cell, params){
            var content = document.createElement("span");

            max = params && params.max ? params.max : 100;
            min = params && params.min ? params.min : 0;
            var colors = params.colors;
            var color = "#666666";
            var percent;
            var percentValue;

            const data = cell.getRow().getData();
            var value = data.Quality;

            if(isNaN(value) || typeof cell.getValue() === "undefined"){
                return;
            }

            //make sure value is in range
            percentValue = parseFloat(value) <= max ? parseFloat(value) : max;
            percentValue = parseFloat(percentValue) >= min ? parseFloat(percentValue) : min;

            //workout percentage
            percent = (max - min) / 100;
            percentValue = Math.round((percentValue - min) / percent);

            var unit = 100 / colors.length;
            var index = Math.floor(percentValue / unit);

            index = Math.min(index, colors.length - 1);
            index = Math.max(index, 0);

            let qualcolor = colors[index];
            content.innerHTML = "<div id='SSID' style='position:absolute;left:10px;display:inline-block;'>" + data.SSID + "</div>&nbsp;<span id='quality_ind' class='' style='position:absolute;top:0px;left:0px;text-align:right;background:" + qualcolor + ";width:6px;height:24px;'>&nbsp;</span>";

            return content
        };
    </script>
    <script>
        var wifi = new Tabulator("#wifi", {
            ajaxURL:"http://wifi.localhost:5006/scan",              // request URI
            ajaxConfig:"GET",                                       // ajax config options go here
            dataLoaderLoading:dataLoaderLoading,                    // change "Loading" message to "&nbsp;"
            index:"BSSID",                                          // use uniqId as index [dynamic]

            rowFormatter:function(row){
                row.getElement().style = "height:24px";
            },

            dependencies:{
                datetime: luxon,
            },

            persistence:{
                sort: true,                                         //persist column sorting
                filter: true,                                       //persist filters
            },

            placeholder:"..." ,

            columns:[

                {field:"tracked", width:102, formatter: function(cell, formatterParams) {
                    const data = cell.getRow().getData();
                    const trgt = 'wifi';

                    var _color = colorUniqId(data.BSSID, ':');
                    var p_signal_color = 'rgba(' + _color + ', 1.0)';
                    var text_color = 'rgba(' + averageColor(_color) + ', 1.0)';

                    if (data.tracked == true) {
                        if (data.is_mute == false) {
                            return "<button id='remove_button_" + data.BSSID + "' style='width:24px;' class='trk_btn rem_button' value='"+data.BSSID+"' data-action='REMOVE' data-target=" + trgt + ">x</button><button id='mute_button_" + data.BSSID + "' style='color:" + text_color +"; background-color:" + p_signal_color +";' class='mute_btn unmute_button' value='" + data.BSSID + "' data-action='MUTE' data-target=" + trgt + ">MUTE</button>";
                        } else {
                            return "<button id='remove_button_" + data.BSSID + "' style='width:24px;' class='trk_btn rem_button' value='"+data.BSSID+"' data-action='REMOVE' data-target=" + trgt + ">x</button><button id='mute_button_" + data.BSSID + "' style='color:" + text_color +"; background-color:" + p_signal_color +";' class='mute_btn   mute_button' value='" + data.BSSID + "' data-action='MUTE' data-target=" + trgt + ">UNMUTE</button>";
                        }
                    } else {
                        return "<button id='add_button_" + data.BSSID + "' style='width:96px;' class='trk_btn add_button button' value='"+data.BSSID+"' data-action='ADD' data-target=" + trgt + ">ADD</button>";
                    }
                }},
                {title:"SSID", field:"SSID", width:140, formatter:ssidFormatter, formatterParams:{
                    field:"Quality",
                    colors:["red", "orange", "yellow", "#008800", "#00FF00"]
                }},
                {title:"BSSID", field:"BSSID", width:120},
                {title:"History", field:"signal_cache", mutator:"signalMutator",  width:162, formatter:chartFormatter, sorter:"array", sorterParams:{
                    type:"length"
                }},
                {title:"db", field:"Signal", width:30},
                {title:"Ch.", field:"Channel", width:50},
                {title:"Freq.", field:"Frequency", width:70},
                {title:"Sec.", field:"Encryption", formatter: "tickCross", width:30},
                {title:"Vendor", field:"Vendor", width:100},
                {title:"Elapsed", field:"elapsed", width:75},
                {title:"Created", field:"created", width:75, formatter:"datetime", formatterParams:{
                    outputFormat:"HH:mm:ss",
                    invalidPlaceholder:"--:--:--",
                }},
                {title:"Updated", field:"updated", width:75, formatter:"datetime", formatterParams:{
                    outputFormat:"HH:mm:ss",
                    invalidPlaceholder:"--:--:--",
                }},
            ],
        });
    </script>
</div>