<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>MagPi Tabulator [ {{ scanner.polling_count }} ]</title>
    <link rel="stylesheet" href="{{ url_for('wifi_bp.static', filename='tabulator/css/tabulator_midnight.min.css') }}">
    <link rel="stylesheet" href="{{ url_for('wifi_bp.static', filename='css/wifi_scan.css') }}">
    <script type="text/javascript" src="{{ url_for('wifi_bp.static', filename='js/luxon.js') }}"></script>
    <script type="text/javascript" src="{{ url_for('wifi_bp.static', filename='tabulator/js/tabulator.min.js') }}"></script>
    <script type="text/javascript" src="{{ url_for('wifi_bp.static', filename='js/peity-vanilla.js') }}"></script>
{% set tab = 'wifi' %}
{% set module = tab %}
    <script>
        const VIEW_TIMEOUT = {{ scanner.config.get('VIEW_TIMEOUT') * 1000 }};

        let wifi_elements = [];
        let active_tabulator = '{{ module }}';

        function loadTab(event, tabName){

            var i, module_tab, tablinks;
            module_tab = document.getElementsByClassName("module_tab");

            for (i = 0; i < module_tab.length; i++) {
                module_tab[i].style.display = "none";
            }

            // Get all elements with class="tablinks" and remove the class "active"
            tab_button = document.getElementsByClassName("tab_button");

            for (i = 0; i < tab_button.length; i++) {
                tab_button[i].className = tab_button[i].className.replace(" active", "");
            }

            // Show the current tab, and add an "active" class to the button that opened the tab
            document.getElementById(tabName).style.display = "block";
            event.currentTarget.className += " active";
            active_tabulator = tabName;

        }
    </script>
</head>
<body>

    <div id="tabs" style="height:30px">
        <button id="scanner_tab_wifi" class="tab_button" onclick="loadTab(event, 'wifi')">wifi</button>
        <button id="scanner_tab_tracked" class="tab_button" onclick="loadTab(event, 'tracked')">tracked</button>
        <button id="scanner_tab_ghosts" class="tab_button" onclick="loadTab(event, 'ghosts')">ghosts</button>
        <button id="scanner_tab_workers" class="tab_button" onclick="loadTab(event, 'workers')">workers</button>
    </div>




    <div id="wifi_filters" style="" class="wifi_filters">
        <select id="wifi_filter_field">
            <option></option>
            <option value="is_mute">Muted</option>
            <option value="tracked">Tracked</option>
            <option value="created">Found</option>
            <option value="updated">Last</option>

            <option value="{{ scanner.CELL_IDENT_FIELD }}">{{ scanner.CELL_IDENT_FIELD }}</option>
            <option value="{{ scanner.CELL_NAME_FIELD }}">{{ scanner.CELL_NAME_FIELD }}</option>
            <option value="{{ scanner.CELL_STRENGTH_FIELD }}">{{ scanner.CELL_STRENGTH_FIELD }}</option>

            <!-- these should iterate over *module* text_attributes -->
            <option value="Channel">Channel</option>
            <option value="Frequency">Frequency</option>
            <option value="Quality">Quality</option>
            <option value="Encryption">Encryption</option>
            <option value="Vendor">Vendor</option>

        </select>
        <select id="wifi_filter_type">
            <option value="=">=</option>
            <option value="<"><</option>
            <option value="<="><=</option>
            <option value=">">></option>
            <option value=">=">>=</option>
            <option value="!=">!=</option>
            <option value="like">like</option>
        </select>
        <input id="wifi_filter_value" type="text" size="16"  placeholder="value to filter">
        <button id="wifi_filter_clear" class="clear_button"><span id="clear_button_text">CLEAR</span></button>
    </div>
    <script>
        // Define variables for input elements
        var fieldEl = document.getElementById("wifi_filter_field");
        var typeEl = document.getElementById("wifi_filter_type");
        var valueEl = document.getElementById("wifi_filter_value");

        // filter
        function customFilter(data){
            return data.field1 && data.field2 < 3;
        }

        // Trigger setFilter function with correct parameters
        function updateFilter(){
            var filterVal = fieldEl.options[fieldEl.selectedIndex].value;
            var typeVal = typeEl.options[typeEl.selectedIndex].value;

            // enable filter
            var filter = filterVal == "function" ? customFilter : filterVal;

            if(filterVal == "function" ){
                typeEl.disabled = true;
                valueEl.disabled = true;
            } else {
                typeEl.disabled = false;
                valueEl.disabled = false;
            }

            if(filterVal){
                wifi.setFilter(filter,typeVal, valueEl.value);
            }
        }

        fieldEl.addEventListener("change", updateFilter);
        typeEl.addEventListener("change", updateFilter);
        valueEl.addEventListener("keyup", updateFilter);

        document.getElementById("wifi_filter_clear").addEventListener("click", function(){
            fieldEl.value = "";
            typeEl.value = "=";
            valueEl.value = "";
            //  not in scope !!
            // var table = Tabulator.prototype.findTable(active_tabulator)[0];
            // table.clearFilter();
        });
    </script>



    <div id="wifi_buttons" style="" class="wifi_buttons">
        <button id="all_button" class="all_button button" value="all_button" data-action=""  data-target="{{ module }}">ALL</button>
        <button id="none_button" class="none_button button" value="none_button" data-action=""  data-target="{{ module }}">NONE</button>
        <button id="write_button" class="write_button button" value="write_button" data-action=""  data-target="{{ module }}">WRITE</button>
        <button id="reload_button" class="reload_button button" value="reload_button" data-action=""  data-target="{{ module }}">RELOAD</button>
    </div>
    <script>

        function setsHeaders(xhttp) {
            xhttp.setRequestHeader('Access-Control-Allow-Origin', 'localhost:*');
            xhttp.setRequestHeader('Access-Control-Allow-Methods', 'POST');
            xhttp.setRequestHeader('Content-Type', 'text/html');
            xhttp.setRequestHeader('Access-Control-Allow-Headers', 'Content-Type, Access-Control-*');
        }

        function write_tracked(button, trgt){

            var xhttp = new XMLHttpRequest();

            xhttp.open('POST', "{{ url_for('wifi_bp.wifi_write') }}", true);
            setsHeaders(xhttp);
            xhttp.setRequestHeader('TARGET', trgt);
            xhttp.send();

            xhttp.onload = function() {
                button.innerHTML = (xhttp.response == "OK")? "DONE": "FAILED";
            };
        }

        function select_all(button, trgt){
            console.log(button, trgt);
        }

        function reload(button, trgt){
            document.location.reload();
        }

        wifi_elements.push(document.getElementById("all_button"));
        wifi_elements.push(document.getElementById("none_button"));
        wifi_elements.push(document.getElementById("write_button"));
        wifi_elements.push(document.getElementById("reload_button"));

        wifi_elements.forEach(function(element) {

            element.addEventListener('click', function(event) {

                if (event.target.classList.contains('all_button')) {
                    select_all(true, event.target.attributes['data-target'].value);
                };

                if (event.target.classList.contains('none_button')) {
                    select_all(false, event.target.attributes['data-target'].value);
                };

                if (event.target.classList.contains('write_button')) {
                    write_tracked(this, event.target.attributes['data-target'].value);
                };

                if (event.target.classList.contains('reload_button')) {
                    reload(this, event.target.attributes['data-target'].value);
                };
            });
        });
    </script>
    <script>

        /*
        a draggable bar would be nice to have!
        https://codepen.io/manishady/pen/xGYvEK
        https://codepen.io/GreenSock/pen/eRBdzM
        */

        function make_deadline_bar() {

            var iteration = 0;
            let iter_timeout = 100;
            var bar_div = document.createElement('div');
            bar_div.id = 'bar_div';

            function update_deadline_bar() {

                setTimeout(function() {

                    bar_div.className = 'bar';
                    var percentage = (iteration * iter_timeout)/VIEW_TIMEOUT * 100;

                    document.getElementById('bar_div').style = "background-color:rgba(0,255,0,0.50);transition: all " + 0.1 +"s;";
                    document.getElementById('bar_div').style.width = 100 - percentage + '%';

                    if (percentage >= 100){
                        replace_data();
                        iteration = 0;
                    }

                    update_deadline_bar();
                    iteration++;

                }, iter_timeout);
            }
            document.getElementById('meter').appendChild(bar_div);
            update_deadline_bar();
        }
    </script>
    <div id="bar_container" style="padding-top:2px;padding-bottom:3px;" class="bar_container">
        <div id="meter" style=""><script>make_deadline_bar();</script></div>
    </div>
{% include 'wifi.js.j2' %}
{% include 'tracked.js.j2' %}
{% include 'ghosts.js.j2' %}
{% include 'workers.js.j2' %}
    <script>

        function replace_data(){
            wifi.replaceData();
            tracked.replaceData();
            ghosts.replaceData();
            workers.replaceData();
        }

        wifi_elements.push(document.getElementById('wifi'));
        wifi_elements.push(document.getElementById('tracked'));
        wifi_elements.push(document.getElementById('ghosts'));
        wifi_elements.push(document.getElementById('workers'));

        function setsHeaders(xhttp) {
            xhttp.setRequestHeader('Access-Control-Allow-Origin', 'localhost:*');
            xhttp.setRequestHeader('Access-Control-Allow-Methods', 'POST');
            xhttp.setRequestHeader('Content-Type', 'text/html');
            xhttp.setRequestHeader('Access-Control-Allow-Headers', 'Content-Type, Access-Control-*');
        }

        function add(uniqId, trgt){
            var xhttp = new XMLHttpRequest();
            xhttp.open("POST", "{{ url_for('.index') }}add/" + uniqId, true);
            setsHeaders(xhttp);
            xhttp.setRequestHeader('TARGET', trgt);
            xhttp.send();

            xhttp.onload = function() {
                const resp = xhttp.response;
                var aButton = document.getElementById("add_button_" + uniqId);
                if (resp == "OK"){
                    aButton.classList.value = "adding_button";
                    aButton.innerHTML = "------";
                    setTimeout(function() {
                        aButton.classList.value = "add_btn added_button";
                        aButton.innerHTML = "ADDED";
                    }, 250);
                } else {
                    aButton.classList.value = "adding_failed_button";
                    aButton.innerHTML = "FAILED!";
                };
            };
        }

        function mute(uniqId, trgt){
            var xhttp = new XMLHttpRequest();

            xhttp.open("POST", "{{ url_for('.index') }}mute/" + uniqId, true);
            setsHeaders(xhttp);
            xhttp.setRequestHeader('TARGET', trgt);
            xhttp.send();

            xhttp.onload = function() {
                const resp = xhttp.response;
                var mButton = document.getElementById("mute_button_" + uniqId);

                if (resp == "False"){
                    mButton.classList.value = "muting_button";
                    mButton.innerHTML = "------";
                    setTimeout(function() {
                        mButton.classList.value = "mute_btn unmute_button";
                        mButton.innerHTML = "MUTE";
                    }, 250);
                }

                if (resp == "True"){
                    mButton.classList.value = "muting_button";
                    mButton.innerHTML = "------";
                    setTimeout(function() {
                        mButton.classList.value = "mute_btn mute_button";
                        mButton.innerHTML = "UNMUTE";
                    }, 250);
                };
            };
        }

        function remove(uniqId, trgt){
            var xhttp = new XMLHttpRequest();
            xhttp.open("POST", "{{ url_for('.index') }}remove/" + uniqId, true);
            setsHeaders(xhttp);
            xhttp.setRequestHeader('TARGET', trgt);
            xhttp.send();

            xhttp.onload = function() {
                const resp = xhttp.response;
                rButton = document.getElementById("remove_button_" + uniqId);
                if (resp == "OK"){
                    rButton.classList.value = "rem_button";
                    rButton.style = "color:white;";
                    rButton.innerHTML = "*";
                    setTimeout(function() {
                        mButton = document.getElementById("mute_button_" + uniqId);
                        uButton = document.getElementById("unmute_button_" + uniqId);

                        if (mButton) {
                                mButton.style = "display:none;"
                        };

                        if (uButton) {
                                uButton.style = "display:none;"
                        };

                        // note width increase
                        rButton.classList.value = "rem_button removed_button button";
                        rButton.innerHTML = "REMOVED";

                    }, 250);
                } else {
                    rButton.classList.value = "remove_failed_button";
                    rButton.innerHTML = "x";
                };
            };
        }

        wifi_elements.forEach(function(element) {

            element.addEventListener('click', function(event) {

                if (event.target.classList.contains('trk_btn')) {
                    if (event.target.classList.contains('add_button')) {
                        add(event.target.value, event.target.attributes['data-target'].value);
                    };
                    if (event.target.classList.contains('rem_button')) {
                        remove(event.target.value, event.target.attributes['data-target'].value)
                    };
                };

                if (event.target.classList.contains('mute_btn')) {
                    mute(event.target.value, event.target.attributes['data-target'].value);
                };

            });
        });
    </script>
</body>
</html>