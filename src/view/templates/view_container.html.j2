<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>{{ container.title }}</title>
    <link href="{{ url_for('vc_bp.static', filename='tabulator/css/tabulator_midnight.min.css') }}" rel="stylesheet">
    <link rel="stylesheet" href="{{ url_for('vc_bp.static', filename='css/container.css') }}">
    <link rel="stylesheet" href="{{ url_for('vc_bp.static', filename='css/cropper.css') }}">
    <link rel="stylesheet" href="{{ url_for('vc_bp.static', filename='css/cam_controller.css') }}">
    <script type="text/javascript" src="{{ url_for('vc_bp.static', filename='js/luxon.js') }}"></script>
    <script type="text/javascript" src="{{ url_for('vc_bp.static', filename='tabulator/js/tabulator.min.js') }}"></script>
    <script src="{{ url_for('vc_bp.static', filename='js/peity-vanilla.js') }}"></script>

    <script>
        function loadTab(event, tabName){

            var i, module_tab, tab_button;
            module_tab = document.getElementsByClassName("module_tab");

            for (i = 0; i < module_tab.length; i++) {
                module_tab[i].style.display = "none";

                let b_c = document.getElementById(module_tab[i].id + '_bar_container');
                if (b_c != null) {
                    b_c.style.display = "none";
                }

                let f_c = document.getElementById(module_tab[i].id + '_container_filters');
                if (f_c != null) {
                    f_c.style.display = "none";
                }
            }

            tab_button = document.getElementsByClassName("tab_button");
            for (i = 0; i < tab_button.length; i++) {
                tab_button[i].className = tab_button[i].className.replace(" active", "");
            }

            let b_cb = document.getElementById(tabName + '_bar_container');
            if (b_cb != null) {
                b_cb.style.display = "block";
            }

            let f_cb = document.getElementById(tabName + '_container_filters');
            if (f_cb != null) {
                f_cb.style.display = "block";
            }

            // THIS SHOULD NOT BE HERE !!!
            if (tabName == 'cam'){
                load_video();

                var image = document.querySelector('#target');
                var cropper = new Cropper(image, {
                    viewMode: 1,
                    center: true,
                    dragMode: 'move',
                    zoomable: false,
                    scalable: false,
                    autoCropArea: .50,
                    restore: false,
                    modal: false,
                    cropBoxMovable: true,
                    cropBoxResizable: true,
                    toggleDragModeOnDblclick: false,
                    cropend: function (event) {
                        cropper.getData();
                        var cropBoxData = cropper.getCropBoxData();

                        var c = Object();
                        c.id = 'crop_input';

                        value = {
                            'x': Math.round(cropBoxData.left),
                            'y': Math.round(cropBoxData.top),
                            'w': Math.round(cropBoxData.width),
                            'h': Math.round(cropBoxData.height)
                        }

                        c.value = JSON.stringify(value);
                        handleCropper(c);
                    }
                });
            }

            document.getElementById(tabName).style.display = "block";
            event.currentTarget.className += " active";

        }
    </script>
</head>
<body>
    <div id="tabs" style="height:30px">
{%- for containerTab in container.module_tabs: -%}
        <button id="container_tab_{{ containerTab.tab }}" class="tab_button{{ ' active' if loop.index0 == 0 }}" onclick="loadTab(event, '{{ containerTab.tab }}')">{{ containerTab.tab }}</button>
{% endfor %}
    </div>

{%- for containerTab in container.module_tabs: -%}
    {% set module = containerTab.module %}
    {% if containerTab.timeout > 0 %}
    <div id="{{ containerTab.tab }}_container_filters" style="{{ 'display:none;' if loop.index0 > 0 }}" class="container_filters">
    {% include 'filter.html.js.j2' %}
    </div>
    {% endif %}
{%- endfor -%}

{% include 'buttons.js.j2' %}

    <script>
        {%- for containerTab in container.module_tabs: %}
        function {{ containerTab.tab }}_reload(){
              {{ containerTab.tab }}.replaceData();
        }

        {%- endfor %}
    </script>
    <script>
        const dataLoaderLoading = "&nbsp;";

        function colorUniqId(data, splt){
            var parts = data.split(splt);
            var R = (parseInt(parts[0], 16) + parseInt(parts[1], 16)) % 255;
            var G = (parseInt(parts[2], 16) + parseInt(parts[3], 16)) % 255;
            var B = (parseInt(parts[4], 16) + parseInt(parts[5], 16)) % 255;
            return [R,G,B];
        };

        function averageColor([R,G,B]){
            let avg = R+G+B/3;
            return (avg > 128)? "00,00,00": "255,255,255";
        };
    </script>

{%- for containerTab in container.module_tabs: -%}
    {% set module = containerTab.module %}
    {% if containerTab.timeout > 0 %}
        {% include 'autoloader.js.j2' %}
    <div id="{{ containerTab.tab }}_bar_container" style="padding-top:2px;padding-bottom:3px;{{ 'display:none;' if loop.index0 > 0 }}" class="bar_container">
        <div id="{{ containerTab.tab }}_meter" style=""><script>{{ containerTab.tab }}_make_deadline_bar();</script></div>
    </div>
    {% endif %}
{%- endfor -%}

{%- for containerTab in container.module_tabs: -%}
    {% set module = containerTab.module %}
    {% set module_fragment = containerTab.get_module_fragment() %}
    {% include module_fragment ignore missing %}
{%- endfor -%}

    <script>
        container_elements = [];

        {%- for containerTab in container.module_tabs: %}
        container_elements.push(document.getElementById('{{ containerTab.tab }}'));
        {%- endfor %}

        {%- for containerTab in container.module_tabs: %}
        {% if containerTab.timeout >  0 %}
        container_elements.push(document.getElementById("{{ containerTab.tab }}_all_button"));
        container_elements.push(document.getElementById("{{ containerTab.tab }}_none_button"));
        container_elements.push(document.getElementById("{{ containerTab.tab }}_write_button"));
        container_elements.push(document.getElementById("{{ containerTab.tab }}_reload_button"));
        {% endif %}
        {%- endfor %}

        container_elements.forEach(function(element) {

            element.addEventListener('click', function(event) {

                if (event.target.classList.contains('trk_btn')) {
                    if (event.target.classList.contains('add_button')) {
                        add(event.target.value, event.target.attributes['data-target'].value);
                    };
                    if (event.target.classList.contains('rem_button')) {
                        remove(event.target.value, event.target.attributes['data-target'].value)
                    };
                };

                if (event.target.classList.contains('mute_btn')) {
                    mute(event.target.value, event.target.attributes['data-target'].value);
                };

                if (event.target.classList.contains('all_button')) {
                    select_all(this, event.target.attributes['data-target'].value);
                };

                if (event.target.classList.contains('none_button')) {
                    select_none(this, event.target.attributes['data-target'].value);
                };

                if (event.target.classList.contains('write_button')) {
                    write_tracked(this, event.target.attributes['data-target'].value); // 'wifi' the http header
                };

                if (event.target.classList.contains('reload_button')) {
                    reload();
                };

                // # IdeA: perhaps this can the basis for supporting a module specific button fragment?
                //  add an id for the button on the app side to identify it.
                //  the value could go into data-value... as JSON
                //if (event.target.classList.contains('' + '_custom_button')) {
                //    alert('' + '_custom_button');
                //};
            });
        });
    </script>
</body>
</html>