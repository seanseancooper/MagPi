<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>{{ container.title }}</title>
    <link href="{{ url_for('vc_bp.static', filename='tabulator/css/tabulator_midnight.min.css') }}" rel="stylesheet">
    <link rel="stylesheet" href="{{ url_for('vc_bp.static', filename='css/container.css') }}">
    <script type="text/javascript" src="{{ url_for('vc_bp.static', filename='js/luxon.js') }}"></script>
    <script type="text/javascript" src="{{ url_for('vc_bp.static', filename='tabulator/js/tabulator.min.js') }}"></script>
    <script type="text/javascript" src="{{ url_for('vc_bp.static', filename='js/peity-vanilla.js') }}"></script>

    <script>
        function loadTab(event, tabName){

            var i, module_tab, tab_button;
            module_tab = document.getElementsByClassName("module_tab");

            for (i = 0; i < module_tab.length; i++) {
                module_tab[i].style.display = "none";

                let b_c = document.getElementById(module_tab[i].id + '_bar_container');
                if (b_c != null) {
                    b_c.style.display = "none";
                }

                let f_c = document.getElementById(module_tab[i].id + '_container_filters');
                if (f_c != null) {
                    f_c.style.display = "none";
                }

                let f_b = document.getElementById(module_tab[i].id + '_container_buttons');
                if (f_b != null) {
                    f_b.style.display = "none";
                }
            }

            tab_button = document.getElementsByClassName("tab_button");

            for (i = 0; i < tab_button.length; i++) {
                tab_button[i].className = tab_button[i].className.replace(" active", "");
            }

            let b_cb = document.getElementById(tabName + '_bar_container');
            if (b_cb != null) {
                b_cb.style.display = "block";
            }

            let f_cb = document.getElementById(tabName + '_container_filters');
            if (f_cb != null) {
                f_cb.style.display = "block";
            }

            let c_bb = document.getElementById(tabName + '_container_buttons');
            if (c_bb != null) {
                c_bb.style.display = "block";
            }

            // TODO: try to move this to cam...
            if (tabName == 'cam'){
                load_video();

                var image = document.querySelector('#cam_target');
                var cropper = new Cropper(image, {
                    viewMode: 1,
                    center: true,
                    dragMode: 'move',
                    zoomable: false,
                    scalable: false,
                    autoCropArea: .50,
                    restore: false,
                    modal: false,
                    cropBoxMovable: true,
                    cropBoxResizable: true,
                    toggleDragModeOnDblclick: false,
                    cropend: function (event) {
                        cropper.getData();
                        var cropBoxData = cropper.getCropBoxData();

                        var c = Object();
                        c.id = 'crop_input';

                        value = {
                            'x': Math.round(cropBoxData.left),
                            'y': Math.round(cropBoxData.top),
                            'w': Math.round(cropBoxData.width),
                            'h': Math.round(cropBoxData.height)
                        }

                        c.value = JSON.stringify(value);
                        handleCropper(c);
                    }
                });
            }

            document.getElementById(tabName).style.display = "block";
            event.currentTarget.className += " active";

        }
    </script>
</head>
<body>
    <div id="tabs" style="height:30px">
{% for containerTab in container.module_tabs: %}
        <button id="container_tab_{{ containerTab.tab }}" class="tab_button{{ ' active' if loop.index0 == 0 }}" onclick="loadTab(event, '{{ containerTab.tab }}')">{{ containerTab.tab }}</button>
{% endfor %}
    </div>
{% include 'filter.html.js.j2' %}
{% include 'buttons.js.j2' %}
{% include 'autoloader.js.j2' %}
    <script>

        // from WIFI module, now homeless...

        function write_tracked(button, trgt){

            var xhttp = new XMLHttpRequest();

            xhttp.open('POST', "http://wifi.localhost:5006/write", true);
            setsHeaders(xhttp);
            xhttp.setRequestHeader('TARGET', trgt);
            xhttp.send();

            xhttp.onload = function() {
                document.getElementById("write_button").innerHTML = (xhttp.response == "OK")? "DONE": "FAILED";
            };
        }

        peity.defaults.line = {
            delimiter: ",",
            fill: "#777",
            height: 18,
            width: 150,
            max: -100,
            min: 0,
            stroke: "#00ff00",
            strokeWidth: 2
        }

        Tabulator.extendModule("mutator", "mutators", {
            signalMutator:function(value, data, type, mutatorParams){

            var sgnlList = [];
            for (const pt of value) {
                sgnlList.push(pt['sgnl'])
            }
            return sgnlList;

            },
        });

        // Formatter to generate peity charts
        var chartFormatter = function(cell, formatterParams, onRendered){

            var content = document.createElement("span");
            var values = cell.getValue();
            content.classList.add('line');
            content.innerHTML = values.join(",");

            // after the cell element has been added to the DOM
            onRendered(function(){
                peity(content, 'line');
            });

            return content;
        };

        function colorUniqId(data, splt){
            var parts = data.split(splt);
            var R = (parseInt(parts[0], 16) + parseInt(parts[1], 16)) % 255;
            var G = (parseInt(parts[2], 16) + parseInt(parts[3], 16)) % 255;
            var B = (parseInt(parts[4], 16) + parseInt(parts[5], 16)) % 255;
            return [R,G,B];
        };

        function averageColor([R,G,B]){
            let avg = R+G+B/3;
            return (avg > 128)? "00,00,00": "255,255,255";
        };

    </script>
{%- for containerTab in container.module_tabs: -%}
{% set module = containerTab.module %}
{% set module_fragment = containerTab.get_module_fragment() %}
{% include module_fragment ignore missing %}
{%- endfor -%}
    <script>
        {%- for containerTab in container.module_tabs: %}
        container_elements.push(document.getElementById('{{ containerTab.tab }}'));
        {%- endfor %}
        container_elements.forEach(function(element) {

            element.addEventListener('click', function(event) {

                if (event.target.classList.contains('trk_btn')) {
                    if (event.target.classList.contains('add_button')) {
                        add(event.target.value, event.target.attributes['data-target'].value);
                    };
                    if (event.target.classList.contains('rem_button')) {
                        remove(event.target.value, event.target.attributes['data-target'].value)
                    };
                };

                if (event.target.classList.contains('mute_btn')) {
                    mute(event.target.value, event.target.attributes['data-target'].value);
                };
            });
        });
    </script>
</body>
</html>